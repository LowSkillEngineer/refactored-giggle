
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007460  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080075f4  080075f4  000175f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800764c  0800764c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800764c  0800764c  0001764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007654  08007654  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007658  08007658  00017658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800765c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001478  200000fc  08007758  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001574  08007758  00021574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea4c  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d03  00000000  00000000  0002ebbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  000318c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090d  00000000  00000000  000324f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ecb  00000000  00000000  00032e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001091a  00000000  00000000  0004bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091af4  00000000  00000000  0005c5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030d0  00000000  00000000  000ee0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  000f11b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080075dc 	.word	0x080075dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	080075dc 	.word	0x080075dc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f9ee 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f820 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8de 	bl	800069c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e0:	f000 f88a 	bl	80005f8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f006 fb64 	bl	8006bb0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80004e8:	480a      	ldr	r0, [pc, #40]	; (8000514 <main+0x44>)
 80004ea:	f000 fabd 	bl	8000a68 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);
 80004ee:	2164      	movs	r1, #100	; 0x64
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <main+0x44>)
 80004f2:	f000 fb6d 	bl	8000bd0 <HAL_ADC_PollForConversion>
  while(1){

	  voltage=HAL_ADC_GetValue(&hadc1);
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x44>)
 80004f8:	f000 fbf5 	bl	8000ce6 <HAL_ADC_GetValue>
 80004fc:	ee07 0a90 	vmov	s15, r0
 8000500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <main+0x48>)
 8000506:	edc3 7a00 	vstr	s15, [r3]
	  	  HAL_Delay(100);
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f000 fa44 	bl	8000998 <HAL_Delay>
	  voltage=HAL_ADC_GetValue(&hadc1);
 8000510:	e7f1      	b.n	80004f6 <main+0x26>
 8000512:	bf00      	nop
 8000514:	20000118 	.word	0x20000118
 8000518:	20000160 	.word	0x20000160

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 f82a 	bl	8007584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <SystemClock_Config+0xd4>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a29      	ldr	r2, [pc, #164]	; (80005f0 <SystemClock_Config+0xd4>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <SystemClock_Config+0xd4>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <SystemClock_Config+0xd8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <SystemClock_Config+0xd8>)
 800056a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <SystemClock_Config+0xd8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000590:	2319      	movs	r3, #25
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000594:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800059a:	2304      	movs	r3, #4
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059e:	2307      	movs	r3, #7
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fadc 	bl	8002b64 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b2:	f000 f89b 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2302      	movs	r3, #2
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2102      	movs	r1, #2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fd3e 	bl	8003054 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005de:	f000 f885 	bl	80006ec <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005e2:	f002 fe1d 	bl	8003220 <HAL_RCC_EnableCSS>
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	463b      	mov	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_ADC1_Init+0x98>)
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <MX_ADC1_Init+0x9c>)
 800060e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_ADC1_Init+0x98>)
 8000612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000616:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_ADC1_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_ADC1_Init+0x98>)
 800062c:	2201      	movs	r2, #1
 800062e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_ADC1_Init+0x98>)
 800063a:	4a17      	ldr	r2, [pc, #92]	; (8000698 <MX_ADC1_Init+0xa0>)
 800063c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_ADC1_Init+0x98>)
 8000646:	2201      	movs	r2, #1
 8000648:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_ADC1_Init+0x98>)
 8000654:	2201      	movs	r2, #1
 8000656:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <MX_ADC1_Init+0x98>)
 800065a:	f000 f9c1 	bl	80009e0 <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000664:	f000 f842 	bl	80006ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800066c:	2301      	movs	r3, #1
 800066e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_ADC1_Init+0x98>)
 800067a:	f000 fb41 	bl	8000d00 <HAL_ADC_ConfigChannel>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000684:	f000 f832 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000118 	.word	0x20000118
 8000694:	40012000 	.word	0x40012000
 8000698:	0f000001 	.word	0x0f000001

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_GPIO_Init+0x4c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <MX_GPIO_Init+0x4c>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_GPIO_Init+0x4c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_GPIO_Init+0x4c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <MX_GPIO_Init+0x4c>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_GPIO_Init+0x4c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <HAL_MspInit+0x4c>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070c:	6453      	str	r3, [r2, #68]	; 0x44
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <HAL_MspInit+0x4c>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_MspInit+0x4c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	; 0x40
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_MspInit+0x4c>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <HAL_ADC_MspInit+0x7c>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d127      	bne.n	80007ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <HAL_ADC_MspInit+0x80>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <HAL_ADC_MspInit+0x80>)
 8000774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <HAL_ADC_MspInit+0x80>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_ADC_MspInit+0x80>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_ADC_MspInit+0x80>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_ADC_MspInit+0x80>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a2:	2301      	movs	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a6:	2303      	movs	r3, #3
 80007a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <HAL_ADC_MspInit+0x84>)
 80007b6:	f000 fdd3 	bl	8001360 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40012000 	.word	0x40012000
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020000 	.word	0x40020000

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80007d4:	f002 fe02 	bl	80033dc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <NMI_Handler+0x8>

080007da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <MemManage_Handler+0x4>

080007e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <BusFault_Handler+0x4>

080007ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler+0x4>

080007f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 f89a 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <OTG_FS_IRQHandler+0x10>)
 800082e:	f001 f86b 	bl	8001908 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000e48 	.word	0x20000e48

0800083c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SystemInit+0x20>)
 8000842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <SystemInit+0x20>)
 8000848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800084c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000898 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000866:	490e      	ldr	r1, [pc, #56]	; (80008a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000868:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800087c:	4c0b      	ldr	r4, [pc, #44]	; (80008ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800088a:	f7ff ffd7 	bl	800083c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088e:	f006 fe81 	bl	8007594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000892:	f7ff fe1d 	bl	80004d0 <main>
  bx  lr    
 8000896:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000898:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80008a4:	0800765c 	.word	0x0800765c
  ldr r2, =_sbss
 80008a8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80008ac:	20001574 	.word	0x20001574

080008b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <HAL_Init+0x40>)
 80008be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_Init+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_Init+0x40>)
 80008ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x40>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x40>)
 80008d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 fcfd 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	200f      	movs	r0, #15
 80008e4:	f000 f808 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff ff06 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023c00 	.word	0x40023c00

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x54>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x58>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fd15 	bl	8001346 <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 fcdd 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x5c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000
 8000950:	20000008 	.word	0x20000008
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008
 800097c:	20000164 	.word	0x20000164

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000164 	.word	0x20000164

08000998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff ffee 	bl	8000980 <HAL_GetTick>
 80009a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009be:	bf00      	nop
 80009c0:	f7ff ffde 	bl	8000980 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008

080009e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d101      	bne.n	80009f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e033      	b.n	8000a5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d109      	bne.n	8000a12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff fea2 	bl	8000748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 0310 	and.w	r3, r3, #16
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d118      	bne.n	8000a50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a26:	f023 0302 	bic.w	r3, r3, #2
 8000a2a:	f043 0202 	orr.w	r2, r3, #2
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 fa86 	bl	8000f44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f023 0303 	bic.w	r3, r3, #3
 8000a46:	f043 0201 	orr.w	r2, r3, #1
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a4e:	e001      	b.n	8000a54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d101      	bne.n	8000a82 <HAL_ADC_Start+0x1a>
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e097      	b.n	8000bb2 <HAL_ADC_Start+0x14a>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2201      	movs	r2, #1
 8000a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d018      	beq.n	8000aca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 0201 	orr.w	r2, r2, #1
 8000aa6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000aa8:	4b45      	ldr	r3, [pc, #276]	; (8000bc0 <HAL_ADC_Start+0x158>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a45      	ldr	r2, [pc, #276]	; (8000bc4 <HAL_ADC_Start+0x15c>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	0c9a      	lsrs	r2, r3, #18
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4413      	add	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000abc:	e002      	b.n	8000ac4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1f9      	bne.n	8000abe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d15f      	bne.n	8000b98 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ae0:	f023 0301 	bic.w	r3, r3, #1
 8000ae4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d007      	beq.n	8000b0a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b16:	d106      	bne.n	8000b26 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1c:	f023 0206 	bic.w	r2, r3, #6
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	645a      	str	r2, [r3, #68]	; 0x44
 8000b24:	e002      	b.n	8000b2c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <HAL_ADC_Start+0x160>)
 8000b36:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000b40:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 031f 	and.w	r3, r3, #31
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10f      	bne.n	8000b6e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d129      	bne.n	8000bb0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	e020      	b.n	8000bb0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <HAL_ADC_Start+0x164>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d11b      	bne.n	8000bb0 <HAL_ADC_Start+0x148>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d114      	bne.n	8000bb0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	689a      	ldr	r2, [r3, #8]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	e00b      	b.n	8000bb0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f043 0210 	orr.w	r2, r3, #16
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	f043 0201 	orr.w	r2, r3, #1
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	431bde83 	.word	0x431bde83
 8000bc8:	40012300 	.word	0x40012300
 8000bcc:	40012000 	.word	0x40012000

08000bd0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bec:	d113      	bne.n	8000c16 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bfc:	d10b      	bne.n	8000c16 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f043 0220 	orr.w	r2, r3, #32
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e063      	b.n	8000cde <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000c16:	f7ff feb3 	bl	8000980 <HAL_GetTick>
 8000c1a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000c1c:	e021      	b.n	8000c62 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c24:	d01d      	beq.n	8000c62 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d007      	beq.n	8000c3c <HAL_ADC_PollForConversion+0x6c>
 8000c2c:	f7ff fea8 	bl	8000980 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d212      	bcs.n	8000c62 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d00b      	beq.n	8000c62 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f043 0204 	orr.w	r2, r3, #4
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e03d      	b.n	8000cde <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d1d6      	bne.n	8000c1e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f06f 0212 	mvn.w	r2, #18
 8000c78:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d123      	bne.n	8000cdc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d11f      	bne.n	8000cdc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d111      	bne.n	8000cdc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d105      	bne.n	8000cdc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f043 0201 	orr.w	r2, r3, #1
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d101      	bne.n	8000d1c <HAL_ADC_ConfigChannel+0x1c>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e105      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x228>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b09      	cmp	r3, #9
 8000d2a:	d925      	bls.n	8000d78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68d9      	ldr	r1, [r3, #12]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	3b1e      	subs	r3, #30
 8000d42:	2207      	movs	r2, #7
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43da      	mvns	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	400a      	ands	r2, r1
 8000d50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68d9      	ldr	r1, [r3, #12]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	4603      	mov	r3, r0
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4403      	add	r3, r0
 8000d6a:	3b1e      	subs	r3, #30
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	e022      	b.n	8000dbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6919      	ldr	r1, [r3, #16]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	4613      	mov	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	400a      	ands	r2, r1
 8000d9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	6919      	ldr	r1, [r3, #16]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	4603      	mov	r3, r0
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4403      	add	r3, r0
 8000db4:	409a      	lsls	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d824      	bhi.n	8000e10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3b05      	subs	r3, #5
 8000dd8:	221f      	movs	r2, #31
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	400a      	ands	r2, r1
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	3b05      	subs	r3, #5
 8000e02:	fa00 f203 	lsl.w	r2, r0, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e0e:	e04c      	b.n	8000eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b0c      	cmp	r3, #12
 8000e16:	d824      	bhi.n	8000e62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	3b23      	subs	r3, #35	; 0x23
 8000e2a:	221f      	movs	r2, #31
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43da      	mvns	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	400a      	ands	r2, r1
 8000e38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	3b23      	subs	r3, #35	; 0x23
 8000e54:	fa00 f203 	lsl.w	r2, r0, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e60:	e023      	b.n	8000eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	3b41      	subs	r3, #65	; 0x41
 8000e74:	221f      	movs	r2, #31
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	400a      	ands	r2, r1
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	3b41      	subs	r3, #65	; 0x41
 8000e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <HAL_ADC_ConfigChannel+0x234>)
 8000eac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a21      	ldr	r2, [pc, #132]	; (8000f38 <HAL_ADC_ConfigChannel+0x238>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d109      	bne.n	8000ecc <HAL_ADC_ConfigChannel+0x1cc>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b12      	cmp	r3, #18
 8000ebe:	d105      	bne.n	8000ecc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <HAL_ADC_ConfigChannel+0x238>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d123      	bne.n	8000f1e <HAL_ADC_ConfigChannel+0x21e>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b10      	cmp	r3, #16
 8000edc:	d003      	beq.n	8000ee6 <HAL_ADC_ConfigChannel+0x1e6>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b11      	cmp	r3, #17
 8000ee4:	d11b      	bne.n	8000f1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b10      	cmp	r3, #16
 8000ef8:	d111      	bne.n	8000f1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_ADC_ConfigChannel+0x23c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <HAL_ADC_ConfigChannel+0x240>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	0c9a      	lsrs	r2, r3, #18
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000f10:	e002      	b.n	8000f18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1f9      	bne.n	8000f12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40012300 	.word	0x40012300
 8000f38:	40012000 	.word	0x40012000
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	431bde83 	.word	0x431bde83

08000f44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f4c:	4b79      	ldr	r3, [pc, #484]	; (8001134 <ADC_Init+0x1f0>)
 8000f4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6859      	ldr	r1, [r3, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	021a      	lsls	r2, r3, #8
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6859      	ldr	r1, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6899      	ldr	r1, [r3, #8]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	4a58      	ldr	r2, [pc, #352]	; (8001138 <ADC_Init+0x1f4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d022      	beq.n	8001022 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6899      	ldr	r1, [r3, #8]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800100c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6899      	ldr	r1, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	e00f      	b.n	8001042 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001040:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0202 	bic.w	r2, r2, #2
 8001050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6899      	ldr	r1, [r3, #8]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7e1b      	ldrb	r3, [r3, #24]
 800105c:	005a      	lsls	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d01b      	beq.n	80010a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800107e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800108e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6859      	ldr	r1, [r3, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	3b01      	subs	r3, #1
 800109c:	035a      	lsls	r2, r3, #13
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	e007      	b.n	80010b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	051a      	lsls	r2, r3, #20
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6899      	ldr	r1, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010fa:	025a      	lsls	r2, r3, #9
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6899      	ldr	r1, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	029a      	lsls	r2, r3, #10
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	609a      	str	r2, [r3, #8]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40012300 	.word	0x40012300
 8001138:	0f000001 	.word	0x0f000001

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff29 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff3e 	bl	8001184 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff8e 	bl	8001230 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff31 	bl	80011a0 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa2 	bl	8001298 <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e159      	b.n	8001630 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	429a      	cmp	r2, r3
 8001396:	f040 8148 	bne.w	800162a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d005      	beq.n	80013b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d130      	bne.n	8001414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 0201 	and.w	r2, r3, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b03      	cmp	r3, #3
 800141e:	d017      	beq.n	8001450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d123      	bne.n	80014a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3208      	adds	r2, #8
 800149e:	69b9      	ldr	r1, [r7, #24]
 80014a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0203 	and.w	r2, r3, #3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80a2 	beq.w	800162a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b57      	ldr	r3, [pc, #348]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a56      	ldr	r2, [pc, #344]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b54      	ldr	r3, [pc, #336]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001502:	4a52      	ldr	r2, [pc, #328]	; (800164c <HAL_GPIO_Init+0x2ec>)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3302      	adds	r3, #2
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	220f      	movs	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a49      	ldr	r2, [pc, #292]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d019      	beq.n	8001562 <HAL_GPIO_Init+0x202>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a48      	ldr	r2, [pc, #288]	; (8001654 <HAL_GPIO_Init+0x2f4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0x1fe>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a47      	ldr	r2, [pc, #284]	; (8001658 <HAL_GPIO_Init+0x2f8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d00d      	beq.n	800155a <HAL_GPIO_Init+0x1fa>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a46      	ldr	r2, [pc, #280]	; (800165c <HAL_GPIO_Init+0x2fc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d007      	beq.n	8001556 <HAL_GPIO_Init+0x1f6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a45      	ldr	r2, [pc, #276]	; (8001660 <HAL_GPIO_Init+0x300>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_GPIO_Init+0x1f2>
 800154e:	2304      	movs	r3, #4
 8001550:	e008      	b.n	8001564 <HAL_GPIO_Init+0x204>
 8001552:	2307      	movs	r3, #7
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x204>
 8001556:	2303      	movs	r3, #3
 8001558:	e004      	b.n	8001564 <HAL_GPIO_Init+0x204>
 800155a:	2302      	movs	r3, #2
 800155c:	e002      	b.n	8001564 <HAL_GPIO_Init+0x204>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x204>
 8001562:	2300      	movs	r3, #0
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	f002 0203 	and.w	r2, r2, #3
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	4093      	lsls	r3, r2
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001574:	4935      	ldr	r1, [pc, #212]	; (800164c <HAL_GPIO_Init+0x2ec>)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <HAL_GPIO_Init+0x304>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a6:	4a2f      	ldr	r2, [pc, #188]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d0:	4a24      	ldr	r2, [pc, #144]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015fa:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_GPIO_Init+0x304>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001624:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_GPIO_Init+0x304>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3301      	adds	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	2b0f      	cmp	r3, #15
 8001634:	f67f aea2 	bls.w	800137c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40013800 	.word	0x40013800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020400 	.word	0x40020400
 8001658:	40020800 	.word	0x40020800
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40021000 	.word	0x40021000
 8001664:	40013c00 	.word	0x40013c00

08001668 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166a:	b08f      	sub	sp, #60	; 0x3c
 800166c:	af0a      	add	r7, sp, #40	; 0x28
 800166e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e10f      	b.n	800189a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d106      	bne.n	800169a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f005 fc6b 	bl	8006f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 ffbe 	bl	800363a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	687e      	ldr	r6, [r7, #4]
 80016c6:	466d      	mov	r5, sp
 80016c8:	f106 0410 	add.w	r4, r6, #16
 80016cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80016dc:	1d33      	adds	r3, r6, #4
 80016de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f001 fe96 	bl	8003412 <USB_CoreInit>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2202      	movs	r2, #2
 80016f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0d0      	b.n	800189a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f001 ffac 	bl	800365c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e04a      	b.n	80017a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	333d      	adds	r3, #61	; 0x3d
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	333c      	adds	r3, #60	; 0x3c
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	b298      	uxth	r0, r3
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	3344      	adds	r3, #68	; 0x44
 8001746:	4602      	mov	r2, r0
 8001748:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	3340      	adds	r3, #64	; 0x40
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	3348      	adds	r3, #72	; 0x48
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001772:	7bfa      	ldrb	r2, [r7, #15]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	334c      	adds	r3, #76	; 0x4c
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	3354      	adds	r3, #84	; 0x54
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	3301      	adds	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d3af      	bcc.n	800170a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e044      	b.n	800183a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	3301      	adds	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	d3b5      	bcc.n	80017b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	687e      	ldr	r6, [r7, #4]
 800184c:	466d      	mov	r5, sp
 800184e:	f106 0410 	add.w	r4, r6, #16
 8001852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800185e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001862:	1d33      	adds	r3, r6, #4
 8001864:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001866:	6838      	ldr	r0, [r7, #0]
 8001868:	f001 ff44 	bl	80036f4 <USB_DevInit>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2202      	movs	r2, #2
 8001876:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00d      	b.n	800189a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f003 f893 	bl	80049be <USB_DevDisconnect>

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_PCD_Start+0x1c>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e020      	b.n	8001900 <HAL_PCD_Start+0x5e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d109      	bne.n	80018e2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d005      	beq.n	80018e2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fe96 	bl	8003618 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 f843 	bl	800497c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b08d      	sub	sp, #52	; 0x34
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f003 f901 	bl	8004b26 <USB_GetMode>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 848a 	bne.w	8002240 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f003 f865 	bl	8004a00 <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 8480 	beq.w	800223e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f003 f852 	bl	8004a00 <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b02      	cmp	r3, #2
 8001964:	d107      	bne.n	8001976 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f002 0202 	and.w	r2, r2, #2
 8001974:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f003 f840 	bl	8004a00 <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b10      	cmp	r3, #16
 8001988:	d161      	bne.n	8001a4e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699a      	ldr	r2, [r3, #24]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0210 	bic.w	r2, r2, #16
 8001998:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	f003 020f 	and.w	r2, r3, #15
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	3304      	adds	r3, #4
 80019b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	0c5b      	lsrs	r3, r3, #17
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d124      	bne.n	8001a10 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d035      	beq.n	8001a3e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	6a38      	ldr	r0, [r7, #32]
 80019e6:	f002 fe77 	bl	80046d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019f6:	441a      	add	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a08:	441a      	add	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	621a      	str	r2, [r3, #32]
 8001a0e:	e016      	b.n	8001a3e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	0c5b      	lsrs	r3, r3, #17
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	2b06      	cmp	r3, #6
 8001a1a:	d110      	bne.n	8001a3e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a22:	2208      	movs	r2, #8
 8001a24:	4619      	mov	r1, r3
 8001a26:	6a38      	ldr	r0, [r7, #32]
 8001a28:	f002 fe56 	bl	80046d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a38:	441a      	add	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0210 	orr.w	r2, r2, #16
 8001a4c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 ffd4 	bl	8004a00 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a62:	f040 80a7 	bne.w	8001bb4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 ffd9 	bl	8004a26 <USB_ReadDevAllOutEpInterrupt>
 8001a74:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001a76:	e099      	b.n	8001bac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 808e 	beq.w	8001ba0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 fffd 	bl	8004a8e <USB_ReadDevOutEPInterrupt>
 8001a94:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00c      	beq.n	8001aba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aac:	461a      	mov	r2, r3
 8001aae:	2301      	movs	r3, #1
 8001ab0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fec3 	bl	8002840 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00c      	beq.n	8001ade <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	015a      	lsls	r2, r3, #5
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2308      	movs	r3, #8
 8001ad4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ad6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 ff99 	bl	8002a10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	015a      	lsls	r2, r3, #5
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001af4:	461a      	mov	r2, r3
 8001af6:	2310      	movs	r3, #16
 8001af8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d030      	beq.n	8001b66 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0c:	2b80      	cmp	r3, #128	; 0x80
 8001b0e:	d109      	bne.n	8001b24 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	3304      	adds	r3, #4
 8001b38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	78db      	ldrb	r3, [r3, #3]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2200      	movs	r2, #0
 8001b46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f005 fb0a 	bl	8007168 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	015a      	lsls	r2, r3, #5
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b60:	461a      	mov	r2, r3
 8001b62:	2302      	movs	r3, #2
 8001b64:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	2320      	movs	r3, #32
 8001b80:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d009      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	015a      	lsls	r2, r3, #5
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f af62 	bne.w	8001a78 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 ff21 	bl	8004a00 <USB_ReadInterrupts>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bc8:	f040 80db 	bne.w	8001d82 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 ff42 	bl	8004a5a <USB_ReadDevAllInEpInterrupt>
 8001bd6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001bdc:	e0cd      	b.n	8001d7a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80c2 	beq.w	8001d6e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 ff68 	bl	8004aca <USB_ReadDevInEPInterrupt>
 8001bfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d057      	beq.n	8001cb6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69f9      	ldr	r1, [r7, #28]
 8001c22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c26:	4013      	ands	r3, r2
 8001c28:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c36:	461a      	mov	r2, r3
 8001c38:	2301      	movs	r3, #1
 8001c3a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d132      	bne.n	8001caa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	334c      	adds	r3, #76	; 0x4c
 8001c54:	6819      	ldr	r1, [r3, #0]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4403      	add	r3, r0
 8001c64:	3348      	adds	r3, #72	; 0x48
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4419      	add	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4403      	add	r3, r0
 8001c78:	334c      	adds	r3, #76	; 0x4c
 8001c7a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d113      	bne.n	8001caa <HAL_PCD_IRQHandler+0x3a2>
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	3354      	adds	r3, #84	; 0x54
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d108      	bne.n	8001caa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	f002 ff6f 	bl	8004b88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f005 f9de 	bl	8007072 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2308      	movs	r3, #8
 8001cd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2310      	movs	r3, #16
 8001cec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d04:	461a      	mov	r2, r3
 8001d06:	2340      	movs	r3, #64	; 0x40
 8001d08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d023      	beq.n	8001d5c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d16:	6a38      	ldr	r0, [r7, #32]
 8001d18:	f001 fe50 	bl	80039bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	3338      	adds	r3, #56	; 0x38
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	78db      	ldrb	r3, [r3, #3]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d108      	bne.n	8001d4a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4619      	mov	r1, r3
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f005 fa21 	bl	800718c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d56:	461a      	mov	r2, r3
 8001d58:	2302      	movs	r3, #2
 8001d5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fcdb 	bl	8002724 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	3301      	adds	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	085b      	lsrs	r3, r3, #1
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f47f af2e 	bne.w	8001bde <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 fe3a 	bl	8004a00 <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d96:	d122      	bne.n	8001dde <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d108      	bne.n	8001dc8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fec3 	bl	8002b4c <HAL_PCDEx_LPM_Callback>
 8001dc6:	e002      	b.n	8001dce <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f005 f9bf 	bl	800714c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fe0c 	bl	8004a00 <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001df2:	d112      	bne.n	8001e1a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d102      	bne.n	8001e0a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f005 f97b 	bl	8007100 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e18:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f002 fdee 	bl	8004a00 <USB_ReadInterrupts>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2e:	f040 80b7 	bne.w	8001fa0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2110      	movs	r1, #16
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f001 fdb5 	bl	80039bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e56:	e046      	b.n	8001ee6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e64:	461a      	mov	r2, r3
 8001e66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e6a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e7c:	0151      	lsls	r1, r2, #5
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	440a      	add	r2, r1
 8001e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e9e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eb0:	0151      	lsls	r1, r2, #5
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	440a      	add	r2, r1
 8001eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ebe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed0:	0151      	lsls	r1, r2, #5
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	440a      	add	r2, r1
 8001ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001eda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ede:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d3b3      	bcc.n	8001e58 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001efe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d016      	beq.n	8001f3a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f1c:	f043 030b 	orr.w	r3, r3, #11
 8001f20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f32:	f043 030b 	orr.w	r3, r3, #11
 8001f36:	6453      	str	r3, [r2, #68]	; 0x44
 8001f38:	e015      	b.n	8001f66 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f4c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f50:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f60:	f043 030b 	orr.w	r3, r3, #11
 8001f64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f002 fdfc 	bl	8004b88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 fd2b 	bl	8004a00 <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb4:	d124      	bne.n	8002000 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 fdc1 	bl	8004b42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f001 fd76 	bl	8003ab6 <USB_GetDevSpeed>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681c      	ldr	r4, [r3, #0]
 8001fd6:	f001 f9f5 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 8001fda:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f001 fa75 	bl	80034d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f005 f869 	bl	80070c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f002 fcfb 	bl	8004a00 <USB_ReadInterrupts>
 800200a:	4603      	mov	r3, r0
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b08      	cmp	r3, #8
 8002012:	d10a      	bne.n	800202a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f005 f846 	bl	80070a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f002 0208 	and.w	r2, r2, #8
 8002028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f002 fce6 	bl	8004a00 <USB_ReadInterrupts>
 8002034:	4603      	mov	r3, r0
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b80      	cmp	r3, #128	; 0x80
 800203c:	d122      	bne.n	8002084 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800204a:	2301      	movs	r3, #1
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	e014      	b.n	800207a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	b2db      	uxtb	r3, r3
 800206c:	4619      	mov	r1, r3
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fb27 	bl	80026c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	3301      	adds	r3, #1
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002080:	429a      	cmp	r2, r3
 8002082:	d3e5      	bcc.n	8002050 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f002 fcb9 	bl	8004a00 <USB_ReadInterrupts>
 800208e:	4603      	mov	r3, r0
 8002090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002098:	d13b      	bne.n	8002112 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800209a:	2301      	movs	r3, #1
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
 800209e:	e02b      	b.n	80020f8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3340      	adds	r3, #64	; 0x40
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d115      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80020c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	da12      	bge.n	80020f2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	333f      	adds	r3, #63	; 0x3f
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	4619      	mov	r1, r3
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fae8 	bl	80026c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	3301      	adds	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fe:	429a      	cmp	r2, r3
 8002100:	d3ce      	bcc.n	80020a0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f002 fc72 	bl	8004a00 <USB_ReadInterrupts>
 800211c:	4603      	mov	r3, r0
 800211e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002126:	d155      	bne.n	80021d4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002128:	2301      	movs	r3, #1
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
 800212c:	e045      	b.n	80021ba <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	4413      	add	r3, r2
 8002136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d12e      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002156:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	da2b      	bge.n	80021b4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002168:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800216c:	429a      	cmp	r2, r3
 800216e:	d121      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b0:	6053      	str	r3, [r2, #4]
            break;
 80021b2:	e007      	b.n	80021c4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	3301      	adds	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d3b4      	bcc.n	800212e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80021d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fc11 	bl	8004a00 <USB_ReadInterrupts>
 80021de:	4603      	mov	r3, r0
 80021e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e8:	d10a      	bne.n	8002200 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f004 ffe0 	bl	80071b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f002 fbfb 	bl	8004a00 <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b04      	cmp	r3, #4
 8002212:	d115      	bne.n	8002240 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f004 ffd0 	bl	80071cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	430a      	orrs	r2, r1
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	e000      	b.n	8002240 <HAL_PCD_IRQHandler+0x938>
      return;
 800223e:	bf00      	nop
    }
  }
}
 8002240:	3734      	adds	r7, #52	; 0x34
 8002242:	46bd      	mov	sp, r7
 8002244:	bd90      	pop	{r4, r7, pc}

08002246 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_PCD_SetAddress+0x1a>
 800225c:	2302      	movs	r3, #2
 800225e:	e013      	b.n	8002288 <HAL_PCD_SetAddress+0x42>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f002 fb59 	bl	8004930 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	4608      	mov	r0, r1
 800229a:	4611      	mov	r1, r2
 800229c:	461a      	mov	r2, r3
 800229e:	4603      	mov	r3, r0
 80022a0:	70fb      	strb	r3, [r7, #3]
 80022a2:	460b      	mov	r3, r1
 80022a4:	803b      	strh	r3, [r7, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	da0f      	bge.n	80022d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	f003 020f 	and.w	r2, r3, #15
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	3338      	adds	r3, #56	; 0x38
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	3304      	adds	r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	705a      	strb	r2, [r3, #1]
 80022d4:	e00f      	b.n	80022f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f003 020f 	and.w	r2, r3, #15
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4413      	add	r3, r2
 80022ec:	3304      	adds	r3, #4
 80022ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002302:	883a      	ldrh	r2, [r7, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	78ba      	ldrb	r2, [r7, #2]
 800230c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	785b      	ldrb	r3, [r3, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d004      	beq.n	8002320 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002320:	78bb      	ldrb	r3, [r7, #2]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d102      	bne.n	800232c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_PCD_EP_Open+0xaa>
 8002336:	2302      	movs	r3, #2
 8002338:	e00e      	b.n	8002358 <HAL_PCD_EP_Open+0xc8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	4618      	mov	r0, r3
 800234a:	f001 fbd9 	bl	8003b00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002356:	7afb      	ldrb	r3, [r7, #11]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800236c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da0f      	bge.n	8002394 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 020f 	and.w	r2, r3, #15
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	3338      	adds	r3, #56	; 0x38
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	705a      	strb	r2, [r3, #1]
 8002392:	e00f      	b.n	80023b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 020f 	and.w	r2, r3, #15
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	3304      	adds	r3, #4
 80023ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_PCD_EP_Close+0x6e>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e00e      	b.n	80023ec <HAL_PCD_EP_Close+0x8c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68f9      	ldr	r1, [r7, #12]
 80023dc:	4618      	mov	r0, r3
 80023de:	f001 fc17 	bl	8003c10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	460b      	mov	r3, r1
 8002402:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4413      	add	r3, r2
 800241a:	3304      	adds	r3, #4
 800241c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2200      	movs	r2, #0
 8002434:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	b2da      	uxtb	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002450:	7afb      	ldrb	r3, [r7, #11]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	6979      	ldr	r1, [r7, #20]
 8002468:	f001 fef6 	bl	8004258 <USB_EP0StartXfer>
 800246c:	e008      	b.n	8002480 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	6979      	ldr	r1, [r7, #20]
 800247c:	f001 fca4 	bl	8003dc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	f003 020f 	and.w	r2, r3, #15
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80024ac:	681b      	ldr	r3, [r3, #0]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	460b      	mov	r3, r1
 80024c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ca:	7afb      	ldrb	r3, [r7, #11]
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	3338      	adds	r3, #56	; 0x38
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4413      	add	r3, r2
 80024de:	3304      	adds	r3, #4
 80024e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2201      	movs	r2, #1
 80024f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024fa:	7afb      	ldrb	r3, [r7, #11]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	b2da      	uxtb	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d102      	bne.n	8002514 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002514:	7afb      	ldrb	r3, [r7, #11]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	6979      	ldr	r1, [r7, #20]
 800252c:	f001 fe94 	bl	8004258 <USB_EP0StartXfer>
 8002530:	e008      	b.n	8002544 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	6979      	ldr	r1, [r7, #20]
 8002540:	f001 fc42 	bl	8003dc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	f003 020f 	and.w	r2, r3, #15
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	d901      	bls.n	800256c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e050      	b.n	800260e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800256c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002570:	2b00      	cmp	r3, #0
 8002572:	da0f      	bge.n	8002594 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	f003 020f 	and.w	r2, r3, #15
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	3338      	adds	r3, #56	; 0x38
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	3304      	adds	r3, #4
 800258a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	705a      	strb	r2, [r3, #1]
 8002592:	e00d      	b.n	80025b0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	3304      	adds	r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_PCD_EP_SetStall+0x82>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e01e      	b.n	800260e <HAL_PCD_EP_SetStall+0xc0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68f9      	ldr	r1, [r7, #12]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 f8d2 	bl	8004788 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	b2d9      	uxtb	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025fe:	461a      	mov	r2, r3
 8002600:	f002 fac2 	bl	8004b88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	f003 020f 	and.w	r2, r3, #15
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	d901      	bls.n	8002634 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e042      	b.n	80026ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002638:	2b00      	cmp	r3, #0
 800263a:	da0f      	bge.n	800265c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	f003 020f 	and.w	r2, r3, #15
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	3338      	adds	r3, #56	; 0x38
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	3304      	adds	r3, #4
 8002652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	705a      	strb	r2, [r3, #1]
 800265a:	e00f      	b.n	800267c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	f003 020f 	and.w	r2, r3, #15
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	3304      	adds	r3, #4
 8002674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_PCD_EP_ClrStall+0x86>
 8002698:	2302      	movs	r3, #2
 800269a:	e00e      	b.n	80026ba <HAL_PCD_EP_ClrStall+0xa4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68f9      	ldr	r1, [r7, #12]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 f8da 	bl	8004864 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80026ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	da0c      	bge.n	80026f0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	f003 020f 	and.w	r2, r3, #15
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	3338      	adds	r3, #56	; 0x38
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	3304      	adds	r3, #4
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e00c      	b.n	800270a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	f003 020f 	and.w	r2, r3, #15
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	3304      	adds	r3, #4
 8002708:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68f9      	ldr	r1, [r7, #12]
 8002710:	4618      	mov	r0, r3
 8002712:	f001 fef9 	bl	8004508 <USB_EPStopXfer>
 8002716:	4603      	mov	r3, r0
 8002718:	72fb      	strb	r3, [r7, #11]

  return ret;
 800271a:	7afb      	ldrb	r3, [r7, #11]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af02      	add	r7, sp, #8
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	3338      	adds	r3, #56	; 0x38
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	3304      	adds	r3, #4
 800274a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a1a      	ldr	r2, [r3, #32]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	429a      	cmp	r2, r3
 8002756:	d901      	bls.n	800275c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e06c      	b.n	8002836 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	699a      	ldr	r2, [r3, #24]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	429a      	cmp	r2, r3
 8002770:	d902      	bls.n	8002778 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	3303      	adds	r3, #3
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002780:	e02b      	b.n	80027da <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	429a      	cmp	r2, r3
 8002796:	d902      	bls.n	800279e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3303      	adds	r3, #3
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6919      	ldr	r1, [r3, #16]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4603      	mov	r3, r0
 80027bc:	6978      	ldr	r0, [r7, #20]
 80027be:	f001 ff4d 	bl	800465c <USB_WritePacket>

    ep->xfer_buff  += len;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	441a      	add	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	441a      	add	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d809      	bhi.n	8002804 <PCD_WriteEmptyTxFifo+0xe0>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a1a      	ldr	r2, [r3, #32]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d203      	bcs.n	8002804 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1be      	bne.n	8002782 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	429a      	cmp	r2, r3
 800280e:	d811      	bhi.n	8002834 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	2201      	movs	r2, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	43db      	mvns	r3, r3
 800282a:	6939      	ldr	r1, [r7, #16]
 800282c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002830:	4013      	ands	r3, r2
 8002832:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	333c      	adds	r3, #60	; 0x3c
 8002858:	3304      	adds	r3, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d17b      	bne.n	800296e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	4a61      	ldr	r2, [pc, #388]	; (8002a08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	f240 80b9 	bls.w	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80b3 	beq.w	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a2:	461a      	mov	r2, r3
 80028a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028a8:	6093      	str	r3, [r2, #8]
 80028aa:	e0a7      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c2:	461a      	mov	r2, r3
 80028c4:	2320      	movs	r3, #32
 80028c6:	6093      	str	r3, [r2, #8]
 80028c8:	e098      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 8093 	bne.w	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	4a4b      	ldr	r2, [pc, #300]	; (8002a08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d90f      	bls.n	80028fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f4:	461a      	mov	r2, r3
 80028f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fa:	6093      	str	r3, [r2, #8]
 80028fc:	e07e      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	3304      	adds	r3, #4
 8002912:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	69da      	ldr	r2, [r3, #28]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	0159      	lsls	r1, r3, #5
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	440b      	add	r3, r1
 8002920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292a:	1ad2      	subs	r2, r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d114      	bne.n	8002960 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002948:	461a      	mov	r2, r3
 800294a:	2101      	movs	r1, #1
 800294c:	f002 f91c 	bl	8004b88 <USB_EP0_OutStart>
 8002950:	e006      	b.n	8002960 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	441a      	add	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f004 fb68 	bl	800703c <HAL_PCD_DataOutStageCallback>
 800296c:	e046      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d124      	bne.n	80029c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800298c:	461a      	mov	r2, r3
 800298e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002992:	6093      	str	r3, [r2, #8]
 8002994:	e032      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ac:	461a      	mov	r2, r3
 80029ae:	2320      	movs	r3, #32
 80029b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4619      	mov	r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f004 fb3f 	bl	800703c <HAL_PCD_DataOutStageCallback>
 80029be:	e01d      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d114      	bne.n	80029f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029e8:	461a      	mov	r2, r3
 80029ea:	2100      	movs	r1, #0
 80029ec:	f002 f8cc 	bl	8004b88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f004 fb20 	bl	800703c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3720      	adds	r7, #32
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	4f54300a 	.word	0x4f54300a
 8002a0c:	4f54310a 	.word	0x4f54310a

08002a10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	333c      	adds	r3, #60	; 0x3c
 8002a28:	3304      	adds	r3, #4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d90e      	bls.n	8002a64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d009      	beq.n	8002a64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f004 fad7 	bl	8007018 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d90c      	bls.n	8002a8c <PCD_EP_OutSetupPacket_int+0x7c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d108      	bne.n	8002a8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a84:	461a      	mov	r2, r3
 8002a86:	2101      	movs	r1, #1
 8002a88:	f002 f87e 	bl	8004b88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	4f54300a 	.word	0x4f54300a

08002a9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d107      	bne.n	8002aca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002aba:	883b      	ldrh	r3, [r7, #0]
 8002abc:	0419      	lsls	r1, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ac8:	e028      	b.n	8002b1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	0c1b      	lsrs	r3, r3, #16
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e00d      	b.n	8002afa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	3340      	adds	r3, #64	; 0x40
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4413      	add	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	3301      	adds	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d3ec      	bcc.n	8002ade <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b04:	883b      	ldrh	r3, [r7, #0]
 8002b06:	0418      	lsls	r0, r3, #16
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6819      	ldr	r1, [r3, #0]
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	4302      	orrs	r2, r0
 8002b14:	3340      	adds	r3, #64	; 0x40
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e267      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d075      	beq.n	8002c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b82:	4b88      	ldr	r3, [pc, #544]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b85      	ldr	r3, [pc, #532]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d112      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9a:	4b82      	ldr	r3, [pc, #520]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b7e      	ldr	r3, [pc, #504]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05b      	beq.n	8002c6c <HAL_RCC_OscConfig+0x108>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d157      	bne.n	8002c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e242      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x74>
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a75      	ldr	r2, [pc, #468]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x98>
 8002be2:	4b70      	ldr	r3, [pc, #448]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6f      	ldr	r2, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b6d      	ldr	r3, [pc, #436]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6c      	ldr	r2, [pc, #432]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bfc:	4b69      	ldr	r3, [pc, #420]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a68      	ldr	r2, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a65      	ldr	r2, [pc, #404]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fd feb0 	bl	8000980 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fd feac 	bl	8000980 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e207      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b5b      	ldr	r3, [pc, #364]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xc0>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fd fe9c 	bl	8000980 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fd fe98 	bl	8000980 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1f3      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0xe8>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d11c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d116      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e1c7      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4937      	ldr	r1, [pc, #220]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	e03a      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd4:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7fd fe51 	bl	8000980 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7fd fe4d 	bl	8000980 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1a8      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4925      	ldr	r1, [pc, #148]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
 8002d14:	e015      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fd fe30 	bl	8000980 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d24:	f7fd fe2c 	bl	8000980 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e187      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d036      	beq.n	8002dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fd fe10 	bl	8000980 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fd fe0c 	bl	8000980 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e167      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x200>
 8002d82:	e01b      	b.n	8002dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fd fdf9 	bl	8000980 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	e00e      	b.n	8002db0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d92:	f7fd fdf5 	bl	8000980 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d907      	bls.n	8002db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e150      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	42470000 	.word	0x42470000
 8002dac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b88      	ldr	r3, [pc, #544]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ea      	bne.n	8002d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8097 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b81      	ldr	r3, [pc, #516]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	4b7d      	ldr	r3, [pc, #500]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a7c      	ldr	r2, [pc, #496]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dea:	4b7a      	ldr	r3, [pc, #488]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	4b77      	ldr	r3, [pc, #476]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e06:	4b74      	ldr	r3, [pc, #464]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a73      	ldr	r2, [pc, #460]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7fd fdb5 	bl	8000980 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7fd fdb1 	bl	8000980 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e10c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2ea>
 8002e40:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a63      	ldr	r2, [pc, #396]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	e01c      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x30c>
 8002e56:	4b5f      	ldr	r3, [pc, #380]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	4b5c      	ldr	r3, [pc, #368]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a5b      	ldr	r2, [pc, #364]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e70:	4b58      	ldr	r3, [pc, #352]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a57      	ldr	r2, [pc, #348]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a54      	ldr	r2, [pc, #336]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d015      	beq.n	8002ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fd fd76 	bl	8000980 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fd fd72 	bl	8000980 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0cb      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <HAL_RCC_OscConfig+0x334>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fd fd60 	bl	8000980 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec4:	f7fd fd5c 	bl	8000980 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0b5      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eec:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	4a38      	ldr	r2, [pc, #224]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a1 	beq.w	8003044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f02:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d05c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d141      	bne.n	8002f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fd fd30 	bl	8000980 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fd fd2c 	bl	8000980 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e087      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	019b      	lsls	r3, r3, #6
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	491b      	ldr	r1, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f72:	f7fd fd05 	bl	8000980 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fd fd01 	bl	8000980 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e05c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x416>
 8002f98:	e054      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fd fcee 	bl	8000980 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fd fcea 	bl	8000980 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e045      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x444>
 8002fc6:	e03d      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e038      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x4ec>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d028      	beq.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d121      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d11a      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003018:	4293      	cmp	r3, r2
 800301a:	d111      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	3b01      	subs	r3, #1
 800302a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0cc      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d90c      	bls.n	8003090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b65      	ldr	r3, [pc, #404]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a8:	4b59      	ldr	r3, [pc, #356]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a58      	ldr	r2, [pc, #352]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c0:	4b53      	ldr	r3, [pc, #332]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a52      	ldr	r2, [pc, #328]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	494d      	ldr	r1, [pc, #308]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d044      	beq.n	8003174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d119      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d003      	beq.n	8003112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310e:	2b03      	cmp	r3, #3
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e067      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4934      	ldr	r1, [pc, #208]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003144:	f7fd fc1c 	bl	8000980 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fd fc18 	bl	8000980 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e04f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20c      	bcs.n	800319c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e032      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4916      	ldr	r1, [pc, #88]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	490e      	ldr	r1, [pc, #56]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031da:	f000 f82d 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031de:	4602      	mov	r2, r0
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	490a      	ldr	r1, [pc, #40]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	5ccb      	ldrb	r3, [r1, r3]
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd fb7c 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023c00 	.word	0x40023c00
 8003210:	40023800 	.word	0x40023800
 8003214:	0800763c 	.word	0x0800763c
 8003218:	20000000 	.word	0x20000000
 800321c:	20000004 	.word	0x20000004

08003220 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <HAL_RCC_EnableCSS+0x14>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]
}
 800322a:	bf00      	nop
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	4247004c 	.word	0x4247004c

08003238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800323c:	b090      	sub	sp, #64	; 0x40
 800323e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
 8003244:	2300      	movs	r3, #0
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003248:	2300      	movs	r3, #0
 800324a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003250:	4b59      	ldr	r3, [pc, #356]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b08      	cmp	r3, #8
 800325a:	d00d      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x40>
 800325c:	2b08      	cmp	r3, #8
 800325e:	f200 80a1 	bhi.w	80033a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x34>
 8003266:	2b04      	cmp	r3, #4
 8003268:	d003      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0x3a>
 800326a:	e09b      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_RCC_GetSysClockFreq+0x184>)
 800326e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003270:	e09b      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003272:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003274:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003276:	e098      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003278:	4b4f      	ldr	r3, [pc, #316]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003280:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003282:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d028      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328e:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	099b      	lsrs	r3, r3, #6
 8003294:	2200      	movs	r2, #0
 8003296:	623b      	str	r3, [r7, #32]
 8003298:	627a      	str	r2, [r7, #36]	; 0x24
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032a0:	2100      	movs	r1, #0
 80032a2:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80032a4:	fb03 f201 	mul.w	r2, r3, r1
 80032a8:	2300      	movs	r3, #0
 80032aa:	fb00 f303 	mul.w	r3, r0, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	4a43      	ldr	r2, [pc, #268]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80032b2:	fba0 1202 	umull	r1, r2, r0, r2
 80032b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032b8:	460a      	mov	r2, r1
 80032ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80032bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032be:	4413      	add	r3, r2
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c4:	2200      	movs	r2, #0
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	61fa      	str	r2, [r7, #28]
 80032ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032d2:	f7fc ff7f 	bl	80001d4 <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4613      	mov	r3, r2
 80032dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032de:	e053      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e0:	4b35      	ldr	r3, [pc, #212]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	2200      	movs	r2, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	617a      	str	r2, [r7, #20]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032f2:	f04f 0b00 	mov.w	fp, #0
 80032f6:	4652      	mov	r2, sl
 80032f8:	465b      	mov	r3, fp
 80032fa:	f04f 0000 	mov.w	r0, #0
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	0159      	lsls	r1, r3, #5
 8003304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003308:	0150      	lsls	r0, r2, #5
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	ebb2 080a 	subs.w	r8, r2, sl
 8003312:	eb63 090b 	sbc.w	r9, r3, fp
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003322:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003326:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800332a:	ebb2 0408 	subs.w	r4, r2, r8
 800332e:	eb63 0509 	sbc.w	r5, r3, r9
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	00eb      	lsls	r3, r5, #3
 800333c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003340:	00e2      	lsls	r2, r4, #3
 8003342:	4614      	mov	r4, r2
 8003344:	461d      	mov	r5, r3
 8003346:	eb14 030a 	adds.w	r3, r4, sl
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	eb45 030b 	adc.w	r3, r5, fp
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800335e:	4629      	mov	r1, r5
 8003360:	028b      	lsls	r3, r1, #10
 8003362:	4621      	mov	r1, r4
 8003364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003368:	4621      	mov	r1, r4
 800336a:	028a      	lsls	r2, r1, #10
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003372:	2200      	movs	r2, #0
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	60fa      	str	r2, [r7, #12]
 8003378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800337c:	f7fc ff2a 	bl	80001d4 <__aeabi_uldivmod>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4613      	mov	r3, r2
 8003386:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	3301      	adds	r3, #1
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033a2:	e002      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCC_GetSysClockFreq+0x184>)
 80033a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3740      	adds	r7, #64	; 0x40
 80033b0:	46bd      	mov	sp, r7
 80033b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	00f42400 	.word	0x00f42400
 80033c0:	017d7840 	.word	0x017d7840

080033c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000000 	.word	0x20000000

080033dc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_RCC_NMI_IRQHandler+0x20>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b80      	cmp	r3, #128	; 0x80
 80033ea:	d104      	bne.n	80033f6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80033ec:	f000 f80a 	bl	8003404 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_RCC_NMI_IRQHandler+0x24>)
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	701a      	strb	r2, [r3, #0]
  }
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	4002380e 	.word	0x4002380e

08003404 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003412:	b084      	sub	sp, #16
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	f107 001c 	add.w	r0, r7, #28
 8003420:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	2b01      	cmp	r3, #1
 8003428:	d122      	bne.n	8003470 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800343e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f001 fbed 	bl	8004c44 <USB_CoreReset>
 800346a:	4603      	mov	r3, r0
 800346c:	73fb      	strb	r3, [r7, #15]
 800346e:	e01a      	b.n	80034a6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f001 fbe1 	bl	8004c44 <USB_CoreReset>
 8003482:	4603      	mov	r3, r0
 8003484:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
 8003498:	e005      	b.n	80034a6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10b      	bne.n	80034c4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f043 0206 	orr.w	r2, r3, #6
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034d0:	b004      	add	sp, #16
 80034d2:	4770      	bx	lr

080034d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	4613      	mov	r3, r2
 80034e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d165      	bne.n	80035b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4a41      	ldr	r2, [pc, #260]	; (80035f0 <USB_SetTurnaroundTime+0x11c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d906      	bls.n	80034fe <USB_SetTurnaroundTime+0x2a>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4a40      	ldr	r2, [pc, #256]	; (80035f4 <USB_SetTurnaroundTime+0x120>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d202      	bcs.n	80034fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80034f8:	230f      	movs	r3, #15
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e062      	b.n	80035c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4a3c      	ldr	r2, [pc, #240]	; (80035f4 <USB_SetTurnaroundTime+0x120>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d306      	bcc.n	8003514 <USB_SetTurnaroundTime+0x40>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4a3b      	ldr	r2, [pc, #236]	; (80035f8 <USB_SetTurnaroundTime+0x124>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d202      	bcs.n	8003514 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800350e:	230e      	movs	r3, #14
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e057      	b.n	80035c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4a38      	ldr	r2, [pc, #224]	; (80035f8 <USB_SetTurnaroundTime+0x124>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d306      	bcc.n	800352a <USB_SetTurnaroundTime+0x56>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a37      	ldr	r2, [pc, #220]	; (80035fc <USB_SetTurnaroundTime+0x128>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d202      	bcs.n	800352a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003524:	230d      	movs	r3, #13
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	e04c      	b.n	80035c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4a33      	ldr	r2, [pc, #204]	; (80035fc <USB_SetTurnaroundTime+0x128>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d306      	bcc.n	8003540 <USB_SetTurnaroundTime+0x6c>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4a32      	ldr	r2, [pc, #200]	; (8003600 <USB_SetTurnaroundTime+0x12c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d802      	bhi.n	8003540 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800353a:	230c      	movs	r3, #12
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e041      	b.n	80035c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4a2f      	ldr	r2, [pc, #188]	; (8003600 <USB_SetTurnaroundTime+0x12c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d906      	bls.n	8003556 <USB_SetTurnaroundTime+0x82>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4a2e      	ldr	r2, [pc, #184]	; (8003604 <USB_SetTurnaroundTime+0x130>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d802      	bhi.n	8003556 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003550:	230b      	movs	r3, #11
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e036      	b.n	80035c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4a2a      	ldr	r2, [pc, #168]	; (8003604 <USB_SetTurnaroundTime+0x130>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d906      	bls.n	800356c <USB_SetTurnaroundTime+0x98>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4a29      	ldr	r2, [pc, #164]	; (8003608 <USB_SetTurnaroundTime+0x134>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d802      	bhi.n	800356c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003566:	230a      	movs	r3, #10
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e02b      	b.n	80035c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4a26      	ldr	r2, [pc, #152]	; (8003608 <USB_SetTurnaroundTime+0x134>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d906      	bls.n	8003582 <USB_SetTurnaroundTime+0xae>
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4a25      	ldr	r2, [pc, #148]	; (800360c <USB_SetTurnaroundTime+0x138>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d202      	bcs.n	8003582 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800357c:	2309      	movs	r3, #9
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e020      	b.n	80035c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4a21      	ldr	r2, [pc, #132]	; (800360c <USB_SetTurnaroundTime+0x138>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d306      	bcc.n	8003598 <USB_SetTurnaroundTime+0xc4>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4a20      	ldr	r2, [pc, #128]	; (8003610 <USB_SetTurnaroundTime+0x13c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d802      	bhi.n	8003598 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003592:	2308      	movs	r3, #8
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e015      	b.n	80035c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <USB_SetTurnaroundTime+0x13c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d906      	bls.n	80035ae <USB_SetTurnaroundTime+0xda>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <USB_SetTurnaroundTime+0x140>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d202      	bcs.n	80035ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80035a8:	2307      	movs	r3, #7
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	e00a      	b.n	80035c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80035ae:	2306      	movs	r3, #6
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e007      	b.n	80035c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d102      	bne.n	80035c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80035ba:	2309      	movs	r3, #9
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e001      	b.n	80035c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80035c0:	2309      	movs	r3, #9
 80035c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	029b      	lsls	r3, r3, #10
 80035d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80035dc:	431a      	orrs	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	00d8acbf 	.word	0x00d8acbf
 80035f4:	00e4e1c0 	.word	0x00e4e1c0
 80035f8:	00f42400 	.word	0x00f42400
 80035fc:	01067380 	.word	0x01067380
 8003600:	011a499f 	.word	0x011a499f
 8003604:	01312cff 	.word	0x01312cff
 8003608:	014ca43f 	.word	0x014ca43f
 800360c:	016e3600 	.word	0x016e3600
 8003610:	01a6ab1f 	.word	0x01a6ab1f
 8003614:	01e84800 	.word	0x01e84800

08003618 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f023 0201 	bic.w	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d115      	bne.n	80036aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800368a:	2001      	movs	r0, #1
 800368c:	f7fd f984 	bl	8000998 <HAL_Delay>
      ms++;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3301      	adds	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f001 fa45 	bl	8004b26 <USB_GetMode>
 800369c:	4603      	mov	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d01e      	beq.n	80036e0 <USB_SetCurrentMode+0x84>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b31      	cmp	r3, #49	; 0x31
 80036a6:	d9f0      	bls.n	800368a <USB_SetCurrentMode+0x2e>
 80036a8:	e01a      	b.n	80036e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d115      	bne.n	80036dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036bc:	2001      	movs	r0, #1
 80036be:	f7fd f96b 	bl	8000998 <HAL_Delay>
      ms++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3301      	adds	r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f001 fa2c 	bl	8004b26 <USB_GetMode>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <USB_SetCurrentMode+0x84>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b31      	cmp	r3, #49	; 0x31
 80036d8:	d9f0      	bls.n	80036bc <USB_SetCurrentMode+0x60>
 80036da:	e001      	b.n	80036e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e005      	b.n	80036ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b32      	cmp	r3, #50	; 0x32
 80036e4:	d101      	bne.n	80036ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036f4:	b084      	sub	sp, #16
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	e009      	b.n	8003728 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3340      	adds	r3, #64	; 0x40
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	2200      	movs	r2, #0
 8003720:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	3301      	adds	r3, #1
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2b0e      	cmp	r3, #14
 800372c:	d9f2      	bls.n	8003714 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800372e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003730:	2b00      	cmp	r3, #0
 8003732:	d11c      	bne.n	800376e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003742:	f043 0302 	orr.w	r3, r3, #2
 8003746:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	639a      	str	r2, [r3, #56]	; 0x38
 800376c:	e00b      	b.n	8003786 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800378c:	461a      	mov	r2, r3
 800378e:	2300      	movs	r3, #0
 8003790:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003798:	4619      	mov	r1, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a0:	461a      	mov	r2, r3
 80037a2:	680b      	ldr	r3, [r1, #0]
 80037a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d10c      	bne.n	80037c6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d104      	bne.n	80037bc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80037b2:	2100      	movs	r1, #0
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f965 	bl	8003a84 <USB_SetDevSpeed>
 80037ba:	e008      	b.n	80037ce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80037bc:	2101      	movs	r1, #1
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f960 	bl	8003a84 <USB_SetDevSpeed>
 80037c4:	e003      	b.n	80037ce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037c6:	2103      	movs	r1, #3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f95b 	bl	8003a84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037ce:	2110      	movs	r1, #16
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f8f3 	bl	80039bc <USB_FlushTxFifo>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f91f 	bl	8003a24 <USB_FlushRxFifo>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f6:	461a      	mov	r2, r3
 80037f8:	2300      	movs	r3, #0
 80037fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003802:	461a      	mov	r2, r3
 8003804:	2300      	movs	r3, #0
 8003806:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380e:	461a      	mov	r2, r3
 8003810:	2300      	movs	r3, #0
 8003812:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003814:	2300      	movs	r3, #0
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	e043      	b.n	80038a2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800382c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003830:	d118      	bne.n	8003864 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003844:	461a      	mov	r2, r3
 8003846:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	e013      	b.n	8003876 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385a:	461a      	mov	r2, r3
 800385c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e008      	b.n	8003876 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003870:	461a      	mov	r2, r3
 8003872:	2300      	movs	r3, #0
 8003874:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003882:	461a      	mov	r2, r3
 8003884:	2300      	movs	r3, #0
 8003886:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003894:	461a      	mov	r2, r3
 8003896:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800389a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	3301      	adds	r3, #1
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d3b7      	bcc.n	800381a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	e043      	b.n	8003938 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038c6:	d118      	bne.n	80038fa <USB_DevInit+0x206>
    {
      if (i == 0U)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038da:	461a      	mov	r2, r3
 80038dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e013      	b.n	800390c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f0:	461a      	mov	r2, r3
 80038f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	e008      	b.n	800390c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003906:	461a      	mov	r2, r3
 8003908:	2300      	movs	r3, #0
 800390a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003918:	461a      	mov	r2, r3
 800391a:	2300      	movs	r3, #0
 800391c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392a:	461a      	mov	r2, r3
 800392c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003930:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	3301      	adds	r3, #1
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	429a      	cmp	r2, r3
 800393e:	d3b7      	bcc.n	80038b0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800394e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003952:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003960:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f043 0210 	orr.w	r2, r3, #16
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <USB_DevInit+0x2c4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f043 0208 	orr.w	r2, r3, #8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d107      	bne.n	80039a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039b4:	b004      	add	sp, #16
 80039b6:	4770      	bx	lr
 80039b8:	803c3800 	.word	0x803c3800

080039bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3301      	adds	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a13      	ldr	r2, [pc, #76]	; (8003a20 <USB_FlushTxFifo+0x64>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e01b      	b.n	8003a14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	daf2      	bge.n	80039ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	019b      	lsls	r3, r3, #6
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3301      	adds	r3, #1
 80039f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a08      	ldr	r2, [pc, #32]	; (8003a20 <USB_FlushTxFifo+0x64>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e006      	b.n	8003a14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d0f0      	beq.n	80039f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	00030d40 	.word	0x00030d40

08003a24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3301      	adds	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <USB_FlushRxFifo+0x5c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e018      	b.n	8003a74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	daf2      	bge.n	8003a30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2210      	movs	r2, #16
 8003a52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3301      	adds	r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <USB_FlushRxFifo+0x5c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e006      	b.n	8003a74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d0f0      	beq.n	8003a54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	00030d40 	.word	0x00030d40

08003a84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	68f9      	ldr	r1, [r7, #12]
 8003aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b087      	sub	sp, #28
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0306 	and.w	r3, r3, #6
 8003ace:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]
 8003ada:	e00a      	b.n	8003af2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d002      	beq.n	8003ae8 <USB_GetDevSpeed+0x32>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b06      	cmp	r3, #6
 8003ae6:	d102      	bne.n	8003aee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	75fb      	strb	r3, [r7, #23]
 8003aec:	e001      	b.n	8003af2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003aee:	230f      	movs	r3, #15
 8003af0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	785b      	ldrb	r3, [r3, #1]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d13a      	bne.n	8003b92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	68f9      	ldr	r1, [r7, #12]
 8003b36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d155      	bne.n	8003c00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	791b      	ldrb	r3, [r3, #4]
 8003b6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	059b      	lsls	r3, r3, #22
 8003b76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	0151      	lsls	r1, r2, #5
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	440a      	add	r2, r1
 8003b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	e036      	b.n	8003c00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	68f9      	ldr	r1, [r7, #12]
 8003bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d11a      	bne.n	8003c00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	791b      	ldrb	r3, [r3, #4]
 8003be4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003be6:	430b      	orrs	r3, r1
 8003be8:	4313      	orrs	r3, r2
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	0151      	lsls	r1, r2, #5
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	440a      	add	r2, r1
 8003bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d161      	bne.n	8003cf0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c42:	d11f      	bne.n	8003c84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	0151      	lsls	r1, r2, #5
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	440a      	add	r2, r1
 8003c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	0151      	lsls	r1, r2, #5
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	440a      	add	r2, r1
 8003c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	2101      	movs	r1, #1
 8003c96:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	2101      	movs	r1, #1
 8003cba:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	68f9      	ldr	r1, [r7, #12]
 8003cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	0159      	lsls	r1, r3, #5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	440b      	add	r3, r1
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <USB_DeactivateEndpoint+0x1b0>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
 8003cee:	e060      	b.n	8003db2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d06:	d11f      	bne.n	8003d48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	0151      	lsls	r1, r2, #5
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	440a      	add	r2, r1
 8003d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	0151      	lsls	r1, r2, #5
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	440a      	add	r2, r1
 8003d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	041b      	lsls	r3, r3, #16
 8003d60:	43db      	mvns	r3, r3
 8003d62:	68f9      	ldr	r1, [r7, #12]
 8003d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d68:	4013      	ands	r3, r2
 8003d6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d82:	041b      	lsls	r3, r3, #16
 8003d84:	43db      	mvns	r3, r3
 8003d86:	68f9      	ldr	r1, [r7, #12]
 8003d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	0159      	lsls	r1, r3, #5
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	440b      	add	r3, r1
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	4619      	mov	r1, r3
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <USB_DeactivateEndpoint+0x1b4>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	ec337800 	.word	0xec337800
 8003dc4:	eff37800 	.word	0xeff37800

08003dc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	f040 815c 	bne.w	80040a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d132      	bne.n	8003e58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	0151      	lsls	r1, r2, #5
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	440a      	add	r2, r1
 8003e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	0151      	lsls	r1, r2, #5
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	440a      	add	r2, r1
 8003e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e50:	0cdb      	lsrs	r3, r3, #19
 8003e52:	04db      	lsls	r3, r3, #19
 8003e54:	6113      	str	r3, [r2, #16]
 8003e56:	e074      	b.n	8003f42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	0151      	lsls	r1, r2, #5
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e72:	0cdb      	lsrs	r3, r3, #19
 8003e74:	04db      	lsls	r3, r3, #19
 8003e76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	0151      	lsls	r1, r2, #5
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	440a      	add	r2, r1
 8003e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6999      	ldr	r1, [r3, #24]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	440b      	add	r3, r1
 8003eb4:	1e59      	subs	r1, r3, #1
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ebe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ec0:	4b9d      	ldr	r3, [pc, #628]	; (8004138 <USB_EPStartXfer+0x370>)
 8003ec2:	400b      	ands	r3, r1
 8003ec4:	69b9      	ldr	r1, [r7, #24]
 8003ec6:	0148      	lsls	r0, r1, #5
 8003ec8:	69f9      	ldr	r1, [r7, #28]
 8003eca:	4401      	add	r1, r0
 8003ecc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eea:	69b9      	ldr	r1, [r7, #24]
 8003eec:	0148      	lsls	r0, r1, #5
 8003eee:	69f9      	ldr	r1, [r7, #28]
 8003ef0:	4401      	add	r1, r0
 8003ef2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	791b      	ldrb	r3, [r3, #4]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d11f      	bne.n	8003f42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	0151      	lsls	r1, r2, #5
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	440a      	add	r2, r1
 8003f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d14b      	bne.n	8003fe0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	791b      	ldrb	r3, [r3, #4]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d128      	bne.n	8003fbe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d110      	bne.n	8003f9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	0151      	lsls	r1, r2, #5
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	440a      	add	r2, r1
 8003f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	e00f      	b.n	8003fbe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	0151      	lsls	r1, r2, #5
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	0151      	lsls	r1, r2, #5
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	440a      	add	r2, r1
 8003fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e133      	b.n	8004248 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ffe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	791b      	ldrb	r3, [r3, #4]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d015      	beq.n	8004034 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 811b 	beq.w	8004248 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	2101      	movs	r1, #1
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	69f9      	ldr	r1, [r7, #28]
 800402a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800402e:	4313      	orrs	r3, r2
 8004030:	634b      	str	r3, [r1, #52]	; 0x34
 8004032:	e109      	b.n	8004248 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d110      	bne.n	8004066 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	440a      	add	r2, r1
 800405a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	e00f      	b.n	8004086 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	440a      	add	r2, r1
 800407c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004084:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6919      	ldr	r1, [r3, #16]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	b298      	uxth	r0, r3
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	4603      	mov	r3, r0
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fade 	bl	800465c <USB_WritePacket>
 80040a0:	e0d2      	b.n	8004248 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040bc:	0cdb      	lsrs	r3, r3, #19
 80040be:	04db      	lsls	r3, r3, #19
 80040c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	0151      	lsls	r1, r2, #5
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	440a      	add	r2, r1
 80040d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d126      	bne.n	800413c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004104:	69b9      	ldr	r1, [r7, #24]
 8004106:	0148      	lsls	r0, r1, #5
 8004108:	69f9      	ldr	r1, [r7, #28]
 800410a:	4401      	add	r1, r0
 800410c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004110:	4313      	orrs	r3, r2
 8004112:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	440a      	add	r2, r1
 800412a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800412e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004132:	6113      	str	r3, [r2, #16]
 8004134:	e03a      	b.n	80041ac <USB_EPStartXfer+0x3e4>
 8004136:	bf00      	nop
 8004138:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4413      	add	r3, r2
 8004146:	1e5a      	subs	r2, r3, #1
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	8afa      	ldrh	r2, [r7, #22]
 8004158:	fb03 f202 	mul.w	r2, r3, r2
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	8afb      	ldrh	r3, [r7, #22]
 8004170:	04d9      	lsls	r1, r3, #19
 8004172:	4b38      	ldr	r3, [pc, #224]	; (8004254 <USB_EPStartXfer+0x48c>)
 8004174:	400b      	ands	r3, r1
 8004176:	69b9      	ldr	r1, [r7, #24]
 8004178:	0148      	lsls	r0, r1, #5
 800417a:	69f9      	ldr	r1, [r7, #28]
 800417c:	4401      	add	r1, r0
 800417e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004182:	4313      	orrs	r3, r2
 8004184:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419c:	69b9      	ldr	r1, [r7, #24]
 800419e:	0148      	lsls	r0, r1, #5
 80041a0:	69f9      	ldr	r1, [r7, #28]
 80041a2:	4401      	add	r1, r0
 80041a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041a8:	4313      	orrs	r3, r2
 80041aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d10d      	bne.n	80041ce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	6919      	ldr	r1, [r3, #16]
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ca:	460a      	mov	r2, r1
 80041cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	791b      	ldrb	r3, [r3, #4]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d128      	bne.n	8004228 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d110      	bne.n	8004208 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	0151      	lsls	r1, r2, #5
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	440a      	add	r2, r1
 80041fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004200:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e00f      	b.n	8004228 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	440a      	add	r2, r1
 800421e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004226:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	0151      	lsls	r1, r2, #5
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	440a      	add	r2, r1
 800423e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004242:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	1ff80000 	.word	0x1ff80000

08004258 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	785b      	ldrb	r3, [r3, #1]
 8004274:	2b01      	cmp	r3, #1
 8004276:	f040 80ce 	bne.w	8004416 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d132      	bne.n	80042e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	0151      	lsls	r1, r2, #5
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	440a      	add	r2, r1
 8004298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	0151      	lsls	r1, r2, #5
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	440a      	add	r2, r1
 80042bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	0151      	lsls	r1, r2, #5
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	440a      	add	r2, r1
 80042dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e0:	0cdb      	lsrs	r3, r3, #19
 80042e2:	04db      	lsls	r3, r3, #19
 80042e4:	6113      	str	r3, [r2, #16]
 80042e6:	e04e      	b.n	8004386 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	0151      	lsls	r1, r2, #5
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	440a      	add	r2, r1
 80042fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004302:	0cdb      	lsrs	r3, r3, #19
 8004304:	04db      	lsls	r3, r3, #19
 8004306:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	0151      	lsls	r1, r2, #5
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	440a      	add	r2, r1
 800431e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004322:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004326:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800432a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	429a      	cmp	r2, r3
 8004336:	d903      	bls.n	8004340 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	0151      	lsls	r1, r2, #5
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	440a      	add	r2, r1
 8004356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800435a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800435e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004376:	6939      	ldr	r1, [r7, #16]
 8004378:	0148      	lsls	r0, r1, #5
 800437a:	6979      	ldr	r1, [r7, #20]
 800437c:	4401      	add	r1, r0
 800437e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004382:	4313      	orrs	r3, r2
 8004384:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d11e      	bne.n	80043ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d009      	beq.n	80043a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	461a      	mov	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	0151      	lsls	r1, r2, #5
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	440a      	add	r2, r1
 80043be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	e097      	b.n	80044fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 8083 	beq.w	80044fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	2101      	movs	r1, #1
 8004406:	fa01 f303 	lsl.w	r3, r1, r3
 800440a:	6979      	ldr	r1, [r7, #20]
 800440c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004410:	4313      	orrs	r3, r2
 8004412:	634b      	str	r3, [r1, #52]	; 0x34
 8004414:	e071      	b.n	80044fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	0151      	lsls	r1, r2, #5
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	440a      	add	r2, r1
 800442c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004430:	0cdb      	lsrs	r3, r3, #19
 8004432:	04db      	lsls	r3, r3, #19
 8004434:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004450:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004454:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004458:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	440a      	add	r2, r1
 8004488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800448c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004490:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a8:	6939      	ldr	r1, [r7, #16]
 80044aa:	0148      	lsls	r0, r1, #5
 80044ac:	6979      	ldr	r1, [r7, #20]
 80044ae:	4401      	add	r1, r0
 80044b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044b4:	4313      	orrs	r3, r2
 80044b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d10d      	bne.n	80044da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6919      	ldr	r1, [r3, #16]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d6:	460a      	mov	r2, r1
 80044d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	0151      	lsls	r1, r2, #5
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	440a      	add	r2, r1
 80044f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	785b      	ldrb	r3, [r3, #1]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d14a      	bne.n	80045bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800453a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800453e:	f040 8086 	bne.w	800464e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	7812      	ldrb	r2, [r2, #0]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004560:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004564:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	7812      	ldrb	r2, [r2, #0]
 800457a:	0151      	lsls	r1, r2, #5
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	440a      	add	r2, r1
 8004580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004588:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3301      	adds	r3, #1
 800458e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f242 7210 	movw	r2, #10000	; 0x2710
 8004596:	4293      	cmp	r3, r2
 8004598:	d902      	bls.n	80045a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
          break;
 800459e:	e056      	b.n	800464e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045b8:	d0e7      	beq.n	800458a <USB_EPStopXfer+0x82>
 80045ba:	e048      	b.n	800464e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d4:	d13b      	bne.n	800464e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	7812      	ldrb	r2, [r2, #0]
 80045ea:	0151      	lsls	r1, r2, #5
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	440a      	add	r2, r1
 80045f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	7812      	ldrb	r2, [r2, #0]
 800460e:	0151      	lsls	r1, r2, #5
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	440a      	add	r2, r1
 8004614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800461c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3301      	adds	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f242 7210 	movw	r2, #10000	; 0x2710
 800462a:	4293      	cmp	r3, r2
 800462c:	d902      	bls.n	8004634 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	75fb      	strb	r3, [r7, #23]
          break;
 8004632:	e00c      	b.n	800464e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464c:	d0e7      	beq.n	800461e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800464e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004650:	4618      	mov	r0, r3
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800465c:	b480      	push	{r7}
 800465e:	b089      	sub	sp, #36	; 0x24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	4611      	mov	r1, r2
 8004668:	461a      	mov	r2, r3
 800466a:	460b      	mov	r3, r1
 800466c:	71fb      	strb	r3, [r7, #7]
 800466e:	4613      	mov	r3, r2
 8004670:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800467a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800467e:	2b00      	cmp	r3, #0
 8004680:	d123      	bne.n	80046ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004682:	88bb      	ldrh	r3, [r7, #4]
 8004684:	3303      	adds	r3, #3
 8004686:	089b      	lsrs	r3, r3, #2
 8004688:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	e018      	b.n	80046c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	031a      	lsls	r2, r3, #12
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	4413      	add	r3, r2
 8004698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469c:	461a      	mov	r2, r3
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	3301      	adds	r3, #1
 80046a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3301      	adds	r3, #1
 80046ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	3301      	adds	r3, #1
 80046b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3301      	adds	r3, #1
 80046ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	3301      	adds	r3, #1
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d3e2      	bcc.n	8004690 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3724      	adds	r7, #36	; 0x24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046d8:	b480      	push	{r7}
 80046da:	b08b      	sub	sp, #44	; 0x2c
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	089b      	lsrs	r3, r3, #2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80046fe:	2300      	movs	r3, #0
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	e014      	b.n	800472e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	3301      	adds	r3, #1
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	3301      	adds	r3, #1
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	3301      	adds	r3, #1
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	3301      	adds	r3, #1
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	3301      	adds	r3, #1
 800472c:	623b      	str	r3, [r7, #32]
 800472e:	6a3a      	ldr	r2, [r7, #32]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	429a      	cmp	r2, r3
 8004734:	d3e6      	bcc.n	8004704 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004736:	8bfb      	ldrh	r3, [r7, #30]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01e      	beq.n	800477a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004746:	461a      	mov	r2, r3
 8004748:	f107 0310 	add.w	r3, r7, #16
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
 800475c:	b2da      	uxtb	r2, r3
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	701a      	strb	r2, [r3, #0]
      i++;
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	3301      	adds	r3, #1
 8004766:	623b      	str	r3, [r7, #32]
      pDest++;
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	3301      	adds	r3, #1
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800476e:	8bfb      	ldrh	r3, [r7, #30]
 8004770:	3b01      	subs	r3, #1
 8004772:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004774:	8bfb      	ldrh	r3, [r7, #30]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ea      	bne.n	8004750 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800477c:	4618      	mov	r0, r3
 800477e:	372c      	adds	r7, #44	; 0x2c
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d12c      	bne.n	80047fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	db12      	blt.n	80047dc <USB_EPSetStall+0x54>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00f      	beq.n	80047dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e02b      	b.n	8004856 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	db12      	blt.n	8004836 <USB_EPSetStall+0xae>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00f      	beq.n	8004836 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	0151      	lsls	r1, r2, #5
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	440a      	add	r2, r1
 800482c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004830:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004834:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	440a      	add	r2, r1
 800484c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004854:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d128      	bne.n	80048d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800489e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	791b      	ldrb	r3, [r3, #4]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d003      	beq.n	80048b0 <USB_EPClearStall+0x4c>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	791b      	ldrb	r3, [r3, #4]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d138      	bne.n	8004922 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	0151      	lsls	r1, r2, #5
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	440a      	add	r2, r1
 80048c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	e027      	b.n	8004922 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	0151      	lsls	r1, r2, #5
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	440a      	add	r2, r1
 80048e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	791b      	ldrb	r3, [r3, #4]
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d003      	beq.n	8004902 <USB_EPClearStall+0x9e>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	791b      	ldrb	r3, [r3, #4]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d10f      	bne.n	8004922 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	0151      	lsls	r1, r2, #5
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	440a      	add	r2, r1
 8004918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800491c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004920:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800494e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004952:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004996:	f023 0303 	bic.w	r3, r3, #3
 800499a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049aa:	f023 0302 	bic.w	r3, r3, #2
 80049ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049be:	b480      	push	{r7}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049d8:	f023 0303 	bic.w	r3, r3, #3
 80049dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ec:	f043 0302 	orr.w	r3, r3, #2
 80049f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4013      	ands	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a18:	68fb      	ldr	r3, [r7, #12]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b085      	sub	sp, #20
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	4013      	ands	r3, r2
 8004a48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	0c1b      	lsrs	r3, r3, #16
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b085      	sub	sp, #20
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	b29b      	uxth	r3, r3
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	460b      	mov	r3, r1
 8004a98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004abc:	68bb      	ldr	r3, [r7, #8]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b087      	sub	sp, #28
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	fa22 f303 	lsr.w	r3, r2, r3
 8004afa:	01db      	lsls	r3, r3, #7
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4013      	ands	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b18:	68bb      	ldr	r3, [r7, #8]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0301 	and.w	r3, r3, #1
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b60:	f023 0307 	bic.w	r3, r3, #7
 8004b64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	460b      	mov	r3, r1
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	333c      	adds	r3, #60	; 0x3c
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4a26      	ldr	r2, [pc, #152]	; (8004c40 <USB_EP0_OutStart+0xb8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d90a      	bls.n	8004bc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bbc:	d101      	bne.n	8004bc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e037      	b.n	8004c32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2300      	movs	r3, #0
 8004bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004be0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf0:	f043 0318 	orr.w	r3, r3, #24
 8004bf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c0a:	7afb      	ldrb	r3, [r7, #11]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10f      	bne.n	8004c30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004c2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	4f54300a 	.word	0x4f54300a

08004c44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3301      	adds	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <USB_CoreReset+0x64>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e01b      	b.n	8004c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	daf2      	bge.n	8004c50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f043 0201 	orr.w	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <USB_CoreReset+0x64>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e006      	b.n	8004c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d0f0      	beq.n	8004c7a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	00030d40 	.word	0x00030d40

08004cac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004cb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004cbc:	f002 fc1e 	bl	80074fc <USBD_static_malloc>
 8004cc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d109      	bne.n	8004cdc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	32b0      	adds	r2, #176	; 0xb0
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e0d4      	b.n	8004e86 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004cdc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f002 fc4e 	bl	8007584 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	32b0      	adds	r2, #176	; 0xb0
 8004cf2:	68f9      	ldr	r1, [r7, #12]
 8004cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	32b0      	adds	r2, #176	; 0xb0
 8004d02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7c1b      	ldrb	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d138      	bne.n	8004d86 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d14:	4b5e      	ldr	r3, [pc, #376]	; (8004e90 <USBD_CDC_Init+0x1e4>)
 8004d16:	7819      	ldrb	r1, [r3, #0]
 8004d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f002 fac9 	bl	80072b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004d24:	4b5a      	ldr	r3, [pc, #360]	; (8004e90 <USBD_CDC_Init+0x1e4>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f003 020f 	and.w	r2, r3, #15
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3324      	adds	r3, #36	; 0x24
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d3e:	4b55      	ldr	r3, [pc, #340]	; (8004e94 <USBD_CDC_Init+0x1e8>)
 8004d40:	7819      	ldrb	r1, [r3, #0]
 8004d42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d46:	2202      	movs	r2, #2
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f002 fab4 	bl	80072b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d4e:	4b51      	ldr	r3, [pc, #324]	; (8004e94 <USBD_CDC_Init+0x1e8>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	f003 020f 	and.w	r2, r3, #15
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004d66:	2201      	movs	r2, #1
 8004d68:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d6a:	4b4b      	ldr	r3, [pc, #300]	; (8004e98 <USBD_CDC_Init+0x1ec>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	f003 020f 	and.w	r2, r3, #15
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3326      	adds	r3, #38	; 0x26
 8004d80:	2210      	movs	r2, #16
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	e035      	b.n	8004df2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d86:	4b42      	ldr	r3, [pc, #264]	; (8004e90 <USBD_CDC_Init+0x1e4>)
 8004d88:	7819      	ldrb	r1, [r3, #0]
 8004d8a:	2340      	movs	r3, #64	; 0x40
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f002 fa91 	bl	80072b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004d94:	4b3e      	ldr	r3, [pc, #248]	; (8004e90 <USBD_CDC_Init+0x1e4>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	f003 020f 	and.w	r2, r3, #15
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	3324      	adds	r3, #36	; 0x24
 8004daa:	2201      	movs	r2, #1
 8004dac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004dae:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <USBD_CDC_Init+0x1e8>)
 8004db0:	7819      	ldrb	r1, [r3, #0]
 8004db2:	2340      	movs	r3, #64	; 0x40
 8004db4:	2202      	movs	r2, #2
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f002 fa7d 	bl	80072b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004dbc:	4b35      	ldr	r3, [pc, #212]	; (8004e94 <USBD_CDC_Init+0x1e8>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	f003 020f 	and.w	r2, r3, #15
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004dd8:	4b2f      	ldr	r3, [pc, #188]	; (8004e98 <USBD_CDC_Init+0x1ec>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	f003 020f 	and.w	r2, r3, #15
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	3326      	adds	r3, #38	; 0x26
 8004dee:	2210      	movs	r2, #16
 8004df0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004df2:	4b29      	ldr	r3, [pc, #164]	; (8004e98 <USBD_CDC_Init+0x1ec>)
 8004df4:	7819      	ldrb	r1, [r3, #0]
 8004df6:	2308      	movs	r3, #8
 8004df8:	2203      	movs	r2, #3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f002 fa5b 	bl	80072b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004e00:	4b25      	ldr	r3, [pc, #148]	; (8004e98 <USBD_CDC_Init+0x1ec>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	f003 020f 	and.w	r2, r3, #15
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	3324      	adds	r3, #36	; 0x24
 8004e16:	2201      	movs	r2, #1
 8004e18:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	33b0      	adds	r3, #176	; 0xb0
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004e50:	2302      	movs	r3, #2
 8004e52:	e018      	b.n	8004e86 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	7c1b      	ldrb	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <USBD_CDC_Init+0x1e8>)
 8004e5e:	7819      	ldrb	r1, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f002 fb12 	bl	8007494 <USBD_LL_PrepareReceive>
 8004e70:	e008      	b.n	8004e84 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <USBD_CDC_Init+0x1e8>)
 8004e74:	7819      	ldrb	r1, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e7c:	2340      	movs	r3, #64	; 0x40
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f002 fb08 	bl	8007494 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000093 	.word	0x20000093
 8004e94:	20000094 	.word	0x20000094
 8004e98:	20000095 	.word	0x20000095

08004e9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004ea8:	4b3a      	ldr	r3, [pc, #232]	; (8004f94 <USBD_CDC_DeInit+0xf8>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f002 fa27 	bl	8007302 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004eb4:	4b37      	ldr	r3, [pc, #220]	; (8004f94 <USBD_CDC_DeInit+0xf8>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	f003 020f 	and.w	r2, r3, #15
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3324      	adds	r3, #36	; 0x24
 8004eca:	2200      	movs	r2, #0
 8004ecc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004ece:	4b32      	ldr	r3, [pc, #200]	; (8004f98 <USBD_CDC_DeInit+0xfc>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f002 fa14 	bl	8007302 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004eda:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <USBD_CDC_DeInit+0xfc>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	f003 020f 	and.w	r2, r3, #15
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004ef6:	4b29      	ldr	r3, [pc, #164]	; (8004f9c <USBD_CDC_DeInit+0x100>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	4619      	mov	r1, r3
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f002 fa00 	bl	8007302 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004f02:	4b26      	ldr	r3, [pc, #152]	; (8004f9c <USBD_CDC_DeInit+0x100>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	f003 020f 	and.w	r2, r3, #15
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	3324      	adds	r3, #36	; 0x24
 8004f18:	2200      	movs	r2, #0
 8004f1a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004f1c:	4b1f      	ldr	r3, [pc, #124]	; (8004f9c <USBD_CDC_DeInit+0x100>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	f003 020f 	and.w	r2, r3, #15
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	3326      	adds	r3, #38	; 0x26
 8004f32:	2200      	movs	r2, #0
 8004f34:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	32b0      	adds	r2, #176	; 0xb0
 8004f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01f      	beq.n	8004f88 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	33b0      	adds	r3, #176	; 0xb0
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	32b0      	adds	r2, #176	; 0xb0
 8004f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f002 fad4 	bl	8007518 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	32b0      	adds	r2, #176	; 0xb0
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000093 	.word	0x20000093
 8004f98:	20000094 	.word	0x20000094
 8004f9c:	20000095 	.word	0x20000095

08004fa0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	32b0      	adds	r2, #176	; 0xb0
 8004fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e0bf      	b.n	8005150 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d050      	beq.n	800507e <USBD_CDC_Setup+0xde>
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	f040 80af 	bne.w	8005140 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	88db      	ldrh	r3, [r3, #6]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d03a      	beq.n	8005060 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	b25b      	sxtb	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	da1b      	bge.n	800502c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	33b0      	adds	r3, #176	; 0xb0
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800500a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	88d2      	ldrh	r2, [r2, #6]
 8005010:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	88db      	ldrh	r3, [r3, #6]
 8005016:	2b07      	cmp	r3, #7
 8005018:	bf28      	it	cs
 800501a:	2307      	movcs	r3, #7
 800501c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	89fa      	ldrh	r2, [r7, #14]
 8005022:	4619      	mov	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f001 fd43 	bl	8006ab0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800502a:	e090      	b.n	800514e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	785a      	ldrb	r2, [r3, #1]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	88db      	ldrh	r3, [r3, #6]
 800503a:	2b3f      	cmp	r3, #63	; 0x3f
 800503c:	d803      	bhi.n	8005046 <USBD_CDC_Setup+0xa6>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	88db      	ldrh	r3, [r3, #6]
 8005042:	b2da      	uxtb	r2, r3
 8005044:	e000      	b.n	8005048 <USBD_CDC_Setup+0xa8>
 8005046:	2240      	movs	r2, #64	; 0x40
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800504e:	6939      	ldr	r1, [r7, #16]
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005056:	461a      	mov	r2, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f001 fd55 	bl	8006b08 <USBD_CtlPrepareRx>
      break;
 800505e:	e076      	b.n	800514e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	33b0      	adds	r3, #176	; 0xb0
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	7850      	ldrb	r0, [r2, #1]
 8005076:	2200      	movs	r2, #0
 8005078:	6839      	ldr	r1, [r7, #0]
 800507a:	4798      	blx	r3
      break;
 800507c:	e067      	b.n	800514e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	785b      	ldrb	r3, [r3, #1]
 8005082:	2b0b      	cmp	r3, #11
 8005084:	d851      	bhi.n	800512a <USBD_CDC_Setup+0x18a>
 8005086:	a201      	add	r2, pc, #4	; (adr r2, 800508c <USBD_CDC_Setup+0xec>)
 8005088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508c:	080050bd 	.word	0x080050bd
 8005090:	08005139 	.word	0x08005139
 8005094:	0800512b 	.word	0x0800512b
 8005098:	0800512b 	.word	0x0800512b
 800509c:	0800512b 	.word	0x0800512b
 80050a0:	0800512b 	.word	0x0800512b
 80050a4:	0800512b 	.word	0x0800512b
 80050a8:	0800512b 	.word	0x0800512b
 80050ac:	0800512b 	.word	0x0800512b
 80050b0:	0800512b 	.word	0x0800512b
 80050b4:	080050e7 	.word	0x080050e7
 80050b8:	08005111 	.word	0x08005111
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d107      	bne.n	80050d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80050c8:	f107 030a 	add.w	r3, r7, #10
 80050cc:	2202      	movs	r2, #2
 80050ce:	4619      	mov	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f001 fced 	bl	8006ab0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050d6:	e032      	b.n	800513e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f001 fc77 	bl	80069ce <USBD_CtlError>
            ret = USBD_FAIL;
 80050e0:	2303      	movs	r3, #3
 80050e2:	75fb      	strb	r3, [r7, #23]
          break;
 80050e4:	e02b      	b.n	800513e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d107      	bne.n	8005102 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80050f2:	f107 030d 	add.w	r3, r7, #13
 80050f6:	2201      	movs	r2, #1
 80050f8:	4619      	mov	r1, r3
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f001 fcd8 	bl	8006ab0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005100:	e01d      	b.n	800513e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005102:	6839      	ldr	r1, [r7, #0]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f001 fc62 	bl	80069ce <USBD_CtlError>
            ret = USBD_FAIL;
 800510a:	2303      	movs	r3, #3
 800510c:	75fb      	strb	r3, [r7, #23]
          break;
 800510e:	e016      	b.n	800513e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b03      	cmp	r3, #3
 800511a:	d00f      	beq.n	800513c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f001 fc55 	bl	80069ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005124:	2303      	movs	r3, #3
 8005126:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005128:	e008      	b.n	800513c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f001 fc4e 	bl	80069ce <USBD_CtlError>
          ret = USBD_FAIL;
 8005132:	2303      	movs	r3, #3
 8005134:	75fb      	strb	r3, [r7, #23]
          break;
 8005136:	e002      	b.n	800513e <USBD_CDC_Setup+0x19e>
          break;
 8005138:	bf00      	nop
 800513a:	e008      	b.n	800514e <USBD_CDC_Setup+0x1ae>
          break;
 800513c:	bf00      	nop
      }
      break;
 800513e:	e006      	b.n	800514e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 fc43 	bl	80069ce <USBD_CtlError>
      ret = USBD_FAIL;
 8005148:	2303      	movs	r3, #3
 800514a:	75fb      	strb	r3, [r7, #23]
      break;
 800514c:	bf00      	nop
  }

  return (uint8_t)ret;
 800514e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800516a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	32b0      	adds	r2, #176	; 0xb0
 8005176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800517e:	2303      	movs	r3, #3
 8005180:	e065      	b.n	800524e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	32b0      	adds	r2, #176	; 0xb0
 800518c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005190:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	f003 020f 	and.w	r2, r3, #15
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	3318      	adds	r3, #24
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d02f      	beq.n	800520c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	f003 020f 	and.w	r2, r3, #15
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	3318      	adds	r3, #24
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	78fb      	ldrb	r3, [r7, #3]
 80051c4:	f003 010f 	and.w	r1, r3, #15
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	460b      	mov	r3, r1
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	440b      	add	r3, r1
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4403      	add	r3, r0
 80051d4:	3348      	adds	r3, #72	; 0x48
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d112      	bne.n	800520c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	f003 020f 	and.w	r2, r3, #15
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	3318      	adds	r3, #24
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80051fe:	78f9      	ldrb	r1, [r7, #3]
 8005200:	2300      	movs	r3, #0
 8005202:	2200      	movs	r2, #0
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f002 f924 	bl	8007452 <USBD_LL_Transmit>
 800520a:	e01f      	b.n	800524c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	33b0      	adds	r3, #176	; 0xb0
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d010      	beq.n	800524c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	33b0      	adds	r3, #176	; 0xb0
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	460b      	mov	r3, r1
 8005260:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	32b0      	adds	r2, #176	; 0xb0
 800526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005270:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	32b0      	adds	r2, #176	; 0xb0
 800527c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005284:	2303      	movs	r3, #3
 8005286:	e01a      	b.n	80052be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f002 f922 	bl	80074d6 <USBD_LL_GetRxDataSize>
 8005292:	4602      	mov	r2, r0
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	33b0      	adds	r3, #176	; 0xb0
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80052b8:	4611      	mov	r1, r2
 80052ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	32b0      	adds	r2, #176	; 0xb0
 80052d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e025      	b.n	8005334 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	33b0      	adds	r3, #176	; 0xb0
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01a      	beq.n	8005332 <USBD_CDC_EP0_RxReady+0x6c>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005302:	2bff      	cmp	r3, #255	; 0xff
 8005304:	d015      	beq.n	8005332 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	33b0      	adds	r3, #176	; 0xb0
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800531e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005326:	b292      	uxth	r2, r2
 8005328:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	22ff      	movs	r2, #255	; 0xff
 800532e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005344:	2182      	movs	r1, #130	; 0x82
 8005346:	4818      	ldr	r0, [pc, #96]	; (80053a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005348:	f000 fd09 	bl	8005d5e <USBD_GetEpDesc>
 800534c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800534e:	2101      	movs	r1, #1
 8005350:	4815      	ldr	r0, [pc, #84]	; (80053a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005352:	f000 fd04 	bl	8005d5e <USBD_GetEpDesc>
 8005356:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005358:	2181      	movs	r1, #129	; 0x81
 800535a:	4813      	ldr	r0, [pc, #76]	; (80053a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800535c:	f000 fcff 	bl	8005d5e <USBD_GetEpDesc>
 8005360:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2210      	movs	r2, #16
 800536c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d006      	beq.n	8005382 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2200      	movs	r2, #0
 8005378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800537c:	711a      	strb	r2, [r3, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d006      	beq.n	8005396 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005390:	711a      	strb	r2, [r3, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2243      	movs	r2, #67	; 0x43
 800539a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800539c:	4b02      	ldr	r3, [pc, #8]	; (80053a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000050 	.word	0x20000050

080053ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80053b4:	2182      	movs	r1, #130	; 0x82
 80053b6:	4818      	ldr	r0, [pc, #96]	; (8005418 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80053b8:	f000 fcd1 	bl	8005d5e <USBD_GetEpDesc>
 80053bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80053be:	2101      	movs	r1, #1
 80053c0:	4815      	ldr	r0, [pc, #84]	; (8005418 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80053c2:	f000 fccc 	bl	8005d5e <USBD_GetEpDesc>
 80053c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80053c8:	2181      	movs	r1, #129	; 0x81
 80053ca:	4813      	ldr	r0, [pc, #76]	; (8005418 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80053cc:	f000 fcc7 	bl	8005d5e <USBD_GetEpDesc>
 80053d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2210      	movs	r2, #16
 80053dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d006      	beq.n	80053f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2200      	movs	r2, #0
 80053e8:	711a      	strb	r2, [r3, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f042 0202 	orr.w	r2, r2, #2
 80053f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d006      	beq.n	8005406 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	711a      	strb	r2, [r3, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f042 0202 	orr.w	r2, r2, #2
 8005404:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2243      	movs	r2, #67	; 0x43
 800540a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800540c:	4b02      	ldr	r3, [pc, #8]	; (8005418 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000050 	.word	0x20000050

0800541c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005424:	2182      	movs	r1, #130	; 0x82
 8005426:	4818      	ldr	r0, [pc, #96]	; (8005488 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005428:	f000 fc99 	bl	8005d5e <USBD_GetEpDesc>
 800542c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800542e:	2101      	movs	r1, #1
 8005430:	4815      	ldr	r0, [pc, #84]	; (8005488 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005432:	f000 fc94 	bl	8005d5e <USBD_GetEpDesc>
 8005436:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005438:	2181      	movs	r1, #129	; 0x81
 800543a:	4813      	ldr	r0, [pc, #76]	; (8005488 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800543c:	f000 fc8f 	bl	8005d5e <USBD_GetEpDesc>
 8005440:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2210      	movs	r2, #16
 800544c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d006      	beq.n	8005462 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	2200      	movs	r2, #0
 8005458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800545c:	711a      	strb	r2, [r3, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d006      	beq.n	8005476 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005470:	711a      	strb	r2, [r3, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2243      	movs	r2, #67	; 0x43
 800547a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800547c:	4b02      	ldr	r3, [pc, #8]	; (8005488 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000050 	.word	0x20000050

0800548c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	220a      	movs	r2, #10
 8005498:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800549a:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	2000000c 	.word	0x2000000c

080054ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80054bc:	2303      	movs	r3, #3
 80054be:	e009      	b.n	80054d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	33b0      	adds	r3, #176	; 0xb0
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	32b0      	adds	r2, #176	; 0xb0
 80054f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054fa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005502:	2303      	movs	r3, #3
 8005504:	e008      	b.n	8005518 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	32b0      	adds	r2, #176	; 0xb0
 8005538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800553c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005544:	2303      	movs	r3, #3
 8005546:	e004      	b.n	8005552 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
	...

08005560 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	32b0      	adds	r2, #176	; 0xb0
 8005572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005576:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	32b0      	adds	r2, #176	; 0xb0
 8005582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800558a:	2303      	movs	r3, #3
 800558c:	e018      	b.n	80055c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	7c1b      	ldrb	r3, [r3, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10a      	bne.n	80055ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005596:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <USBD_CDC_ReceivePacket+0x68>)
 8005598:	7819      	ldrb	r1, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f001 ff75 	bl	8007494 <USBD_LL_PrepareReceive>
 80055aa:	e008      	b.n	80055be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <USBD_CDC_ReceivePacket+0x68>)
 80055ae:	7819      	ldrb	r1, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055b6:	2340      	movs	r3, #64	; 0x40
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f001 ff6b 	bl	8007494 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20000094 	.word	0x20000094

080055cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	4613      	mov	r3, r2
 80055d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e01f      	b.n	8005624 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	79fa      	ldrb	r2, [r7, #7]
 8005616:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f001 fde5 	bl	80071e8 <USBD_LL_Init>
 800561e:	4603      	mov	r3, r0
 8005620:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005622:	7dfb      	ldrb	r3, [r7, #23]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005640:	2303      	movs	r3, #3
 8005642:	e025      	b.n	8005690 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	32ae      	adds	r2, #174	; 0xae
 8005656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00f      	beq.n	8005680 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	32ae      	adds	r2, #174	; 0xae
 800566a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	f107 020e 	add.w	r2, r7, #14
 8005674:	4610      	mov	r0, r2
 8005676:	4798      	blx	r3
 8005678:	4602      	mov	r2, r0
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f001 fded 	bl	8007280 <USBD_LL_Start>
 80056a6:	4603      	mov	r3, r0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d009      	beq.n	80056f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	78fa      	ldrb	r2, [r7, #3]
 80056ea:	4611      	mov	r1, r2
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	4798      	blx	r3
 80056f0:	4603      	mov	r3, r0
 80056f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	4611      	mov	r1, r2
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4798      	blx	r3
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005724:	2303      	movs	r3, #3
 8005726:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005742:	6839      	ldr	r1, [r7, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f001 f908 	bl	800695a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005758:	461a      	mov	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	2b02      	cmp	r3, #2
 800576c:	d01a      	beq.n	80057a4 <USBD_LL_SetupStage+0x72>
 800576e:	2b02      	cmp	r3, #2
 8005770:	d822      	bhi.n	80057b8 <USBD_LL_SetupStage+0x86>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <USBD_LL_SetupStage+0x4a>
 8005776:	2b01      	cmp	r3, #1
 8005778:	d00a      	beq.n	8005790 <USBD_LL_SetupStage+0x5e>
 800577a:	e01d      	b.n	80057b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fb5f 	bl	8005e48 <USBD_StdDevReq>
 800578a:	4603      	mov	r3, r0
 800578c:	73fb      	strb	r3, [r7, #15]
      break;
 800578e:	e020      	b.n	80057d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fbc7 	bl	8005f2c <USBD_StdItfReq>
 800579e:	4603      	mov	r3, r0
 80057a0:	73fb      	strb	r3, [r7, #15]
      break;
 80057a2:	e016      	b.n	80057d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fc29 	bl	8006004 <USBD_StdEPReq>
 80057b2:	4603      	mov	r3, r0
 80057b4:	73fb      	strb	r3, [r7, #15]
      break;
 80057b6:	e00c      	b.n	80057d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80057be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f001 fdba 	bl	8007340 <USBD_LL_StallEP>
 80057cc:	4603      	mov	r3, r0
 80057ce:	73fb      	strb	r3, [r7, #15]
      break;
 80057d0:	bf00      	nop
  }

  return ret;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	460b      	mov	r3, r1
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80057ee:	7afb      	ldrb	r3, [r7, #11]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d16e      	bne.n	80058d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80057fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005802:	2b03      	cmp	r3, #3
 8005804:	f040 8098 	bne.w	8005938 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	429a      	cmp	r2, r3
 8005812:	d913      	bls.n	800583c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	1ad2      	subs	r2, r2, r3
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	4293      	cmp	r3, r2
 800582c:	bf28      	it	cs
 800582e:	4613      	movcs	r3, r2
 8005830:	461a      	mov	r2, r3
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f001 f984 	bl	8006b42 <USBD_CtlContinueRx>
 800583a:	e07d      	b.n	8005938 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	2b02      	cmp	r3, #2
 8005848:	d014      	beq.n	8005874 <USBD_LL_DataOutStage+0x98>
 800584a:	2b02      	cmp	r3, #2
 800584c:	d81d      	bhi.n	800588a <USBD_LL_DataOutStage+0xae>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <USBD_LL_DataOutStage+0x7c>
 8005852:	2b01      	cmp	r3, #1
 8005854:	d003      	beq.n	800585e <USBD_LL_DataOutStage+0x82>
 8005856:	e018      	b.n	800588a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	75bb      	strb	r3, [r7, #22]
            break;
 800585c:	e018      	b.n	8005890 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005864:	b2db      	uxtb	r3, r3
 8005866:	4619      	mov	r1, r3
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fa5e 	bl	8005d2a <USBD_CoreFindIF>
 800586e:	4603      	mov	r3, r0
 8005870:	75bb      	strb	r3, [r7, #22]
            break;
 8005872:	e00d      	b.n	8005890 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800587a:	b2db      	uxtb	r3, r3
 800587c:	4619      	mov	r1, r3
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 fa60 	bl	8005d44 <USBD_CoreFindEP>
 8005884:	4603      	mov	r3, r0
 8005886:	75bb      	strb	r3, [r7, #22]
            break;
 8005888:	e002      	b.n	8005890 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	75bb      	strb	r3, [r7, #22]
            break;
 800588e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005890:	7dbb      	ldrb	r3, [r7, #22]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d119      	bne.n	80058ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d113      	bne.n	80058ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80058a2:	7dba      	ldrb	r2, [r7, #22]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	32ae      	adds	r2, #174	; 0xae
 80058a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80058b2:	7dba      	ldrb	r2, [r7, #22]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80058ba:	7dba      	ldrb	r2, [r7, #22]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	32ae      	adds	r2, #174	; 0xae
 80058c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f001 f94a 	bl	8006b64 <USBD_CtlSendStatus>
 80058d0:	e032      	b.n	8005938 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80058d2:	7afb      	ldrb	r3, [r7, #11]
 80058d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	4619      	mov	r1, r3
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fa31 	bl	8005d44 <USBD_CoreFindEP>
 80058e2:	4603      	mov	r3, r0
 80058e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058e6:	7dbb      	ldrb	r3, [r7, #22]
 80058e8:	2bff      	cmp	r3, #255	; 0xff
 80058ea:	d025      	beq.n	8005938 <USBD_LL_DataOutStage+0x15c>
 80058ec:	7dbb      	ldrb	r3, [r7, #22]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d122      	bne.n	8005938 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d117      	bne.n	800592e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80058fe:	7dba      	ldrb	r2, [r7, #22]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	32ae      	adds	r2, #174	; 0xae
 8005904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00f      	beq.n	800592e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800590e:	7dba      	ldrb	r2, [r7, #22]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005916:	7dba      	ldrb	r2, [r7, #22]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	32ae      	adds	r2, #174	; 0xae
 800591c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	7afa      	ldrb	r2, [r7, #11]
 8005924:	4611      	mov	r1, r2
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	4798      	blx	r3
 800592a:	4603      	mov	r3, r0
 800592c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800592e:	7dfb      	ldrb	r3, [r7, #23]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005934:	7dfb      	ldrb	r3, [r7, #23]
 8005936:	e000      	b.n	800593a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b086      	sub	sp, #24
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	460b      	mov	r3, r1
 800594c:	607a      	str	r2, [r7, #4]
 800594e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005950:	7afb      	ldrb	r3, [r7, #11]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d16f      	bne.n	8005a36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3314      	adds	r3, #20
 800595a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005962:	2b02      	cmp	r3, #2
 8005964:	d15a      	bne.n	8005a1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	429a      	cmp	r2, r3
 8005970:	d914      	bls.n	800599c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	1ad2      	subs	r2, r2, r3
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	461a      	mov	r2, r3
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f001 f8ac 	bl	8006ae6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800598e:	2300      	movs	r3, #0
 8005990:	2200      	movs	r2, #0
 8005992:	2100      	movs	r1, #0
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f001 fd7d 	bl	8007494 <USBD_LL_PrepareReceive>
 800599a:	e03f      	b.n	8005a1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d11c      	bne.n	80059e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d316      	bcc.n	80059e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80059be:	429a      	cmp	r2, r3
 80059c0:	d20f      	bcs.n	80059e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80059c2:	2200      	movs	r2, #0
 80059c4:	2100      	movs	r1, #0
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f001 f88d 	bl	8006ae6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059d4:	2300      	movs	r3, #0
 80059d6:	2200      	movs	r2, #0
 80059d8:	2100      	movs	r1, #0
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f001 fd5a 	bl	8007494 <USBD_LL_PrepareReceive>
 80059e0:	e01c      	b.n	8005a1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d10f      	bne.n	8005a0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a0e:	2180      	movs	r1, #128	; 0x80
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f001 fc95 	bl	8007340 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f001 f8b7 	bl	8006b8a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d03a      	beq.n	8005a9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f7ff fe42 	bl	80056b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005a34:	e032      	b.n	8005a9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005a36:	7afb      	ldrb	r3, [r7, #11]
 8005a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	4619      	mov	r1, r3
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f97f 	bl	8005d44 <USBD_CoreFindEP>
 8005a46:	4603      	mov	r3, r0
 8005a48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
 8005a4c:	2bff      	cmp	r3, #255	; 0xff
 8005a4e:	d025      	beq.n	8005a9c <USBD_LL_DataInStage+0x15a>
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d122      	bne.n	8005a9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d11c      	bne.n	8005a9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005a62:	7dfa      	ldrb	r2, [r7, #23]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	32ae      	adds	r2, #174	; 0xae
 8005a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d014      	beq.n	8005a9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005a72:	7dfa      	ldrb	r2, [r7, #23]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005a7a:	7dfa      	ldrb	r2, [r7, #23]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	32ae      	adds	r2, #174	; 0xae
 8005a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	7afa      	ldrb	r2, [r7, #11]
 8005a88:	4611      	mov	r1, r2
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	4798      	blx	r3
 8005a8e:	4603      	mov	r3, r0
 8005a90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005a92:	7dbb      	ldrb	r3, [r7, #22]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005a98:	7dbb      	ldrb	r3, [r7, #22]
 8005a9a:	e000      	b.n	8005a9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d014      	beq.n	8005b0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00e      	beq.n	8005b0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6852      	ldr	r2, [r2, #4]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	4611      	mov	r1, r2
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	4798      	blx	r3
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b0c:	2340      	movs	r3, #64	; 0x40
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2100      	movs	r1, #0
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f001 fbcf 	bl	80072b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2240      	movs	r2, #64	; 0x40
 8005b24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b28:	2340      	movs	r3, #64	; 0x40
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2180      	movs	r1, #128	; 0x80
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 fbc1 	bl	80072b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2240      	movs	r2, #64	; 0x40
 8005b3e:	621a      	str	r2, [r3, #32]

  return ret;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	78fa      	ldrb	r2, [r7, #3]
 8005b5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2204      	movs	r2, #4
 8005b84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d106      	bne.n	8005bb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d110      	bne.n	8005bfc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00b      	beq.n	8005bfc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	32ae      	adds	r2, #174	; 0xae
 8005c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e01c      	b.n	8005c62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d115      	bne.n	8005c60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	32ae      	adds	r2, #174	; 0xae
 8005c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	32ae      	adds	r2, #174	; 0xae
 8005c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	78fa      	ldrb	r2, [r7, #3]
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	32ae      	adds	r2, #174	; 0xae
 8005c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e01c      	b.n	8005cc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d115      	bne.n	8005cc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	32ae      	adds	r2, #174	; 0xae
 8005ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	32ae      	adds	r2, #174	; 0xae
 8005cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00e      	beq.n	8005d20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6852      	ldr	r2, [r2, #4]
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	4611      	mov	r1, r2
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	4798      	blx	r3
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	460b      	mov	r3, r1
 8005d34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b086      	sub	sp, #24
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	460b      	mov	r3, r1
 8005d68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	885b      	ldrh	r3, [r3, #2]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d920      	bls.n	8005dc8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005d8e:	e013      	b.n	8005db8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005d90:	f107 030a 	add.w	r3, r7, #10
 8005d94:	4619      	mov	r1, r3
 8005d96:	6978      	ldr	r0, [r7, #20]
 8005d98:	f000 f81b 	bl	8005dd2 <USBD_GetNextDesc>
 8005d9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	2b05      	cmp	r3, #5
 8005da4:	d108      	bne.n	8005db8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	789b      	ldrb	r3, [r3, #2]
 8005dae:	78fa      	ldrb	r2, [r7, #3]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d008      	beq.n	8005dc6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	885b      	ldrh	r3, [r3, #2]
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	897b      	ldrh	r3, [r7, #10]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d8e5      	bhi.n	8005d90 <USBD_GetEpDesc+0x32>
 8005dc4:	e000      	b.n	8005dc8 <USBD_GetEpDesc+0x6a>
          break;
 8005dc6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005dc8:	693b      	ldr	r3, [r7, #16]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b085      	sub	sp, #20
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	881a      	ldrh	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	4413      	add	r3, r2
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	3301      	adds	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e2a:	8a3b      	ldrh	r3, [r7, #16]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	b21a      	sxth	r2, r3
 8005e30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	b21b      	sxth	r3, r3
 8005e38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e3a:	89fb      	ldrh	r3, [r7, #14]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d005      	beq.n	8005e6e <USBD_StdDevReq+0x26>
 8005e62:	2b40      	cmp	r3, #64	; 0x40
 8005e64:	d857      	bhi.n	8005f16 <USBD_StdDevReq+0xce>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00f      	beq.n	8005e8a <USBD_StdDevReq+0x42>
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d153      	bne.n	8005f16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	32ae      	adds	r2, #174	; 0xae
 8005e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3
 8005e84:	4603      	mov	r3, r0
 8005e86:	73fb      	strb	r3, [r7, #15]
      break;
 8005e88:	e04a      	b.n	8005f20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	2b09      	cmp	r3, #9
 8005e90:	d83b      	bhi.n	8005f0a <USBD_StdDevReq+0xc2>
 8005e92:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <USBD_StdDevReq+0x50>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005eed 	.word	0x08005eed
 8005e9c:	08005f01 	.word	0x08005f01
 8005ea0:	08005f0b 	.word	0x08005f0b
 8005ea4:	08005ef7 	.word	0x08005ef7
 8005ea8:	08005f0b 	.word	0x08005f0b
 8005eac:	08005ecb 	.word	0x08005ecb
 8005eb0:	08005ec1 	.word	0x08005ec1
 8005eb4:	08005f0b 	.word	0x08005f0b
 8005eb8:	08005ee3 	.word	0x08005ee3
 8005ebc:	08005ed5 	.word	0x08005ed5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa3c 	bl	8006340 <USBD_GetDescriptor>
          break;
 8005ec8:	e024      	b.n	8005f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fba1 	bl	8006614 <USBD_SetAddress>
          break;
 8005ed2:	e01f      	b.n	8005f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fbe0 	bl	800669c <USBD_SetConfig>
 8005edc:	4603      	mov	r3, r0
 8005ede:	73fb      	strb	r3, [r7, #15]
          break;
 8005ee0:	e018      	b.n	8005f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fc83 	bl	80067f0 <USBD_GetConfig>
          break;
 8005eea:	e013      	b.n	8005f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fcb4 	bl	800685c <USBD_GetStatus>
          break;
 8005ef4:	e00e      	b.n	8005f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fce3 	bl	80068c4 <USBD_SetFeature>
          break;
 8005efe:	e009      	b.n	8005f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fd07 	bl	8006916 <USBD_ClrFeature>
          break;
 8005f08:	e004      	b.n	8005f14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fd5e 	bl	80069ce <USBD_CtlError>
          break;
 8005f12:	bf00      	nop
      }
      break;
 8005f14:	e004      	b.n	8005f20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fd58 	bl	80069ce <USBD_CtlError>
      break;
 8005f1e:	bf00      	nop
  }

  return ret;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop

08005f2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	d005      	beq.n	8005f52 <USBD_StdItfReq+0x26>
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	d852      	bhi.n	8005ff0 <USBD_StdItfReq+0xc4>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <USBD_StdItfReq+0x26>
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d14e      	bne.n	8005ff0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d840      	bhi.n	8005fe2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	889b      	ldrh	r3, [r3, #4]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d836      	bhi.n	8005fd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	889b      	ldrh	r3, [r3, #4]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff fed9 	bl	8005d2a <USBD_CoreFindIF>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	2bff      	cmp	r3, #255	; 0xff
 8005f80:	d01d      	beq.n	8005fbe <USBD_StdItfReq+0x92>
 8005f82:	7bbb      	ldrb	r3, [r7, #14]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d11a      	bne.n	8005fbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005f88:	7bba      	ldrb	r2, [r7, #14]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	32ae      	adds	r2, #174	; 0xae
 8005f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00f      	beq.n	8005fb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005f98:	7bba      	ldrb	r2, [r7, #14]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005fa0:	7bba      	ldrb	r2, [r7, #14]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	32ae      	adds	r2, #174	; 0xae
 8005fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005fb6:	e004      	b.n	8005fc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005fbc:	e001      	b.n	8005fc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	88db      	ldrh	r3, [r3, #6]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d110      	bne.n	8005fec <USBD_StdItfReq+0xc0>
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10d      	bne.n	8005fec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fdc7 	bl	8006b64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005fd6:	e009      	b.n	8005fec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fcf7 	bl	80069ce <USBD_CtlError>
          break;
 8005fe0:	e004      	b.n	8005fec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005fe2:	6839      	ldr	r1, [r7, #0]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fcf2 	bl	80069ce <USBD_CtlError>
          break;
 8005fea:	e000      	b.n	8005fee <USBD_StdItfReq+0xc2>
          break;
 8005fec:	bf00      	nop
      }
      break;
 8005fee:	e004      	b.n	8005ffa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fceb 	bl	80069ce <USBD_CtlError>
      break;
 8005ff8:	bf00      	nop
  }

  return ret;
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	889b      	ldrh	r3, [r3, #4]
 8006016:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006020:	2b40      	cmp	r3, #64	; 0x40
 8006022:	d007      	beq.n	8006034 <USBD_StdEPReq+0x30>
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	f200 817f 	bhi.w	8006328 <USBD_StdEPReq+0x324>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d02a      	beq.n	8006084 <USBD_StdEPReq+0x80>
 800602e:	2b20      	cmp	r3, #32
 8006030:	f040 817a 	bne.w	8006328 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff fe83 	bl	8005d44 <USBD_CoreFindEP>
 800603e:	4603      	mov	r3, r0
 8006040:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006042:	7b7b      	ldrb	r3, [r7, #13]
 8006044:	2bff      	cmp	r3, #255	; 0xff
 8006046:	f000 8174 	beq.w	8006332 <USBD_StdEPReq+0x32e>
 800604a:	7b7b      	ldrb	r3, [r7, #13]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f040 8170 	bne.w	8006332 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006052:	7b7a      	ldrb	r2, [r7, #13]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800605a:	7b7a      	ldrb	r2, [r7, #13]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	32ae      	adds	r2, #174	; 0xae
 8006060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 8163 	beq.w	8006332 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800606c:	7b7a      	ldrb	r2, [r7, #13]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	32ae      	adds	r2, #174	; 0xae
 8006072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
 800607e:	4603      	mov	r3, r0
 8006080:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006082:	e156      	b.n	8006332 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	785b      	ldrb	r3, [r3, #1]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d008      	beq.n	800609e <USBD_StdEPReq+0x9a>
 800608c:	2b03      	cmp	r3, #3
 800608e:	f300 8145 	bgt.w	800631c <USBD_StdEPReq+0x318>
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 809b 	beq.w	80061ce <USBD_StdEPReq+0x1ca>
 8006098:	2b01      	cmp	r3, #1
 800609a:	d03c      	beq.n	8006116 <USBD_StdEPReq+0x112>
 800609c:	e13e      	b.n	800631c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d002      	beq.n	80060b0 <USBD_StdEPReq+0xac>
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d016      	beq.n	80060dc <USBD_StdEPReq+0xd8>
 80060ae:	e02c      	b.n	800610a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00d      	beq.n	80060d2 <USBD_StdEPReq+0xce>
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	2b80      	cmp	r3, #128	; 0x80
 80060ba:	d00a      	beq.n	80060d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060bc:	7bbb      	ldrb	r3, [r7, #14]
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 f93d 	bl	8007340 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060c6:	2180      	movs	r1, #128	; 0x80
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 f939 	bl	8007340 <USBD_LL_StallEP>
 80060ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060d0:	e020      	b.n	8006114 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fc7a 	bl	80069ce <USBD_CtlError>
              break;
 80060da:	e01b      	b.n	8006114 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	885b      	ldrh	r3, [r3, #2]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10e      	bne.n	8006102 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00b      	beq.n	8006102 <USBD_StdEPReq+0xfe>
 80060ea:	7bbb      	ldrb	r3, [r7, #14]
 80060ec:	2b80      	cmp	r3, #128	; 0x80
 80060ee:	d008      	beq.n	8006102 <USBD_StdEPReq+0xfe>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	88db      	ldrh	r3, [r3, #6]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d104      	bne.n	8006102 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f001 f91f 	bl	8007340 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fd2e 	bl	8006b64 <USBD_CtlSendStatus>

              break;
 8006108:	e004      	b.n	8006114 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fc5e 	bl	80069ce <USBD_CtlError>
              break;
 8006112:	bf00      	nop
          }
          break;
 8006114:	e107      	b.n	8006326 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d002      	beq.n	8006128 <USBD_StdEPReq+0x124>
 8006122:	2b03      	cmp	r3, #3
 8006124:	d016      	beq.n	8006154 <USBD_StdEPReq+0x150>
 8006126:	e04b      	b.n	80061c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00d      	beq.n	800614a <USBD_StdEPReq+0x146>
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	2b80      	cmp	r3, #128	; 0x80
 8006132:	d00a      	beq.n	800614a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 f901 	bl	8007340 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800613e:	2180      	movs	r1, #128	; 0x80
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f001 f8fd 	bl	8007340 <USBD_LL_StallEP>
 8006146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006148:	e040      	b.n	80061cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fc3e 	bl	80069ce <USBD_CtlError>
              break;
 8006152:	e03b      	b.n	80061cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	885b      	ldrh	r3, [r3, #2]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d136      	bne.n	80061ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800615c:	7bbb      	ldrb	r3, [r7, #14]
 800615e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006166:	7bbb      	ldrb	r3, [r7, #14]
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f001 f907 	bl	800737e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fcf7 	bl	8006b64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff fde2 	bl	8005d44 <USBD_CoreFindEP>
 8006180:	4603      	mov	r3, r0
 8006182:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006184:	7b7b      	ldrb	r3, [r7, #13]
 8006186:	2bff      	cmp	r3, #255	; 0xff
 8006188:	d01f      	beq.n	80061ca <USBD_StdEPReq+0x1c6>
 800618a:	7b7b      	ldrb	r3, [r7, #13]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d11c      	bne.n	80061ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006190:	7b7a      	ldrb	r2, [r7, #13]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006198:	7b7a      	ldrb	r2, [r7, #13]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	32ae      	adds	r2, #174	; 0xae
 800619e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d010      	beq.n	80061ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061a8:	7b7a      	ldrb	r2, [r7, #13]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	32ae      	adds	r2, #174	; 0xae
 80061ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4798      	blx	r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80061be:	e004      	b.n	80061ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fc03 	bl	80069ce <USBD_CtlError>
              break;
 80061c8:	e000      	b.n	80061cc <USBD_StdEPReq+0x1c8>
              break;
 80061ca:	bf00      	nop
          }
          break;
 80061cc:	e0ab      	b.n	8006326 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d002      	beq.n	80061e0 <USBD_StdEPReq+0x1dc>
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d032      	beq.n	8006244 <USBD_StdEPReq+0x240>
 80061de:	e097      	b.n	8006310 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <USBD_StdEPReq+0x1f2>
 80061e6:	7bbb      	ldrb	r3, [r7, #14]
 80061e8:	2b80      	cmp	r3, #128	; 0x80
 80061ea:	d004      	beq.n	80061f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fbed 	bl	80069ce <USBD_CtlError>
                break;
 80061f4:	e091      	b.n	800631a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	da0b      	bge.n	8006216 <USBD_StdEPReq+0x212>
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006204:	4613      	mov	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	3310      	adds	r3, #16
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	4413      	add	r3, r2
 8006212:	3304      	adds	r3, #4
 8006214:	e00b      	b.n	800622e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006216:	7bbb      	ldrb	r3, [r7, #14]
 8006218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	4413      	add	r3, r2
 800622c:	3304      	adds	r3, #4
 800622e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2202      	movs	r2, #2
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fc37 	bl	8006ab0 <USBD_CtlSendData>
              break;
 8006242:	e06a      	b.n	800631a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006248:	2b00      	cmp	r3, #0
 800624a:	da11      	bge.n	8006270 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800624c:	7bbb      	ldrb	r3, [r7, #14]
 800624e:	f003 020f 	and.w	r2, r3, #15
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	3324      	adds	r3, #36	; 0x24
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d117      	bne.n	8006296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fbb0 	bl	80069ce <USBD_CtlError>
                  break;
 800626e:	e054      	b.n	800631a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006270:	7bbb      	ldrb	r3, [r7, #14]
 8006272:	f003 020f 	and.w	r2, r3, #15
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d104      	bne.n	8006296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fb9d 	bl	80069ce <USBD_CtlError>
                  break;
 8006294:	e041      	b.n	800631a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800629a:	2b00      	cmp	r3, #0
 800629c:	da0b      	bge.n	80062b6 <USBD_StdEPReq+0x2b2>
 800629e:	7bbb      	ldrb	r3, [r7, #14]
 80062a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	3310      	adds	r3, #16
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	4413      	add	r3, r2
 80062b2:	3304      	adds	r3, #4
 80062b4:	e00b      	b.n	80062ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062b6:	7bbb      	ldrb	r3, [r7, #14]
 80062b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4413      	add	r3, r2
 80062cc:	3304      	adds	r3, #4
 80062ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <USBD_StdEPReq+0x2d8>
 80062d6:	7bbb      	ldrb	r3, [r7, #14]
 80062d8:	2b80      	cmp	r3, #128	; 0x80
 80062da:	d103      	bne.n	80062e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e00e      	b.n	8006302 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	4619      	mov	r1, r3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 f867 	bl	80073bc <USBD_LL_IsStallEP>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	e002      	b.n	8006302 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2202      	movs	r2, #2
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fbd1 	bl	8006ab0 <USBD_CtlSendData>
              break;
 800630e:	e004      	b.n	800631a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fb5b 	bl	80069ce <USBD_CtlError>
              break;
 8006318:	bf00      	nop
          }
          break;
 800631a:	e004      	b.n	8006326 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fb55 	bl	80069ce <USBD_CtlError>
          break;
 8006324:	bf00      	nop
      }
      break;
 8006326:	e005      	b.n	8006334 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fb4f 	bl	80069ce <USBD_CtlError>
      break;
 8006330:	e000      	b.n	8006334 <USBD_StdEPReq+0x330>
      break;
 8006332:	bf00      	nop
  }

  return ret;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	885b      	ldrh	r3, [r3, #2]
 800635a:	0a1b      	lsrs	r3, r3, #8
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	2b06      	cmp	r3, #6
 8006362:	f200 8128 	bhi.w	80065b6 <USBD_GetDescriptor+0x276>
 8006366:	a201      	add	r2, pc, #4	; (adr r2, 800636c <USBD_GetDescriptor+0x2c>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	08006389 	.word	0x08006389
 8006370:	080063a1 	.word	0x080063a1
 8006374:	080063e1 	.word	0x080063e1
 8006378:	080065b7 	.word	0x080065b7
 800637c:	080065b7 	.word	0x080065b7
 8006380:	08006557 	.word	0x08006557
 8006384:	08006583 	.word	0x08006583
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	7c12      	ldrb	r2, [r2, #16]
 8006394:	f107 0108 	add.w	r1, r7, #8
 8006398:	4610      	mov	r0, r2
 800639a:	4798      	blx	r3
 800639c:	60f8      	str	r0, [r7, #12]
      break;
 800639e:	e112      	b.n	80065c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	7c1b      	ldrb	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10d      	bne.n	80063c4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	f107 0208 	add.w	r2, r7, #8
 80063b4:	4610      	mov	r0, r2
 80063b6:	4798      	blx	r3
 80063b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3301      	adds	r3, #1
 80063be:	2202      	movs	r2, #2
 80063c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80063c2:	e100      	b.n	80065c6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	f107 0208 	add.w	r2, r7, #8
 80063d0:	4610      	mov	r0, r2
 80063d2:	4798      	blx	r3
 80063d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3301      	adds	r3, #1
 80063da:	2202      	movs	r2, #2
 80063dc:	701a      	strb	r2, [r3, #0]
      break;
 80063de:	e0f2      	b.n	80065c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	885b      	ldrh	r3, [r3, #2]
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b05      	cmp	r3, #5
 80063e8:	f200 80ac 	bhi.w	8006544 <USBD_GetDescriptor+0x204>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <USBD_GetDescriptor+0xb4>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	0800640d 	.word	0x0800640d
 80063f8:	08006441 	.word	0x08006441
 80063fc:	08006475 	.word	0x08006475
 8006400:	080064a9 	.word	0x080064a9
 8006404:	080064dd 	.word	0x080064dd
 8006408:	08006511 	.word	0x08006511
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00b      	beq.n	8006430 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	7c12      	ldrb	r2, [r2, #16]
 8006424:	f107 0108 	add.w	r1, r7, #8
 8006428:	4610      	mov	r0, r2
 800642a:	4798      	blx	r3
 800642c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800642e:	e091      	b.n	8006554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 facb 	bl	80069ce <USBD_CtlError>
            err++;
 8006438:	7afb      	ldrb	r3, [r7, #11]
 800643a:	3301      	adds	r3, #1
 800643c:	72fb      	strb	r3, [r7, #11]
          break;
 800643e:	e089      	b.n	8006554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	7c12      	ldrb	r2, [r2, #16]
 8006458:	f107 0108 	add.w	r1, r7, #8
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
 8006460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006462:	e077      	b.n	8006554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fab1 	bl	80069ce <USBD_CtlError>
            err++;
 800646c:	7afb      	ldrb	r3, [r7, #11]
 800646e:	3301      	adds	r3, #1
 8006470:	72fb      	strb	r3, [r7, #11]
          break;
 8006472:	e06f      	b.n	8006554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	7c12      	ldrb	r2, [r2, #16]
 800648c:	f107 0108 	add.w	r1, r7, #8
 8006490:	4610      	mov	r0, r2
 8006492:	4798      	blx	r3
 8006494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006496:	e05d      	b.n	8006554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa97 	bl	80069ce <USBD_CtlError>
            err++;
 80064a0:	7afb      	ldrb	r3, [r7, #11]
 80064a2:	3301      	adds	r3, #1
 80064a4:	72fb      	strb	r3, [r7, #11]
          break;
 80064a6:	e055      	b.n	8006554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	7c12      	ldrb	r2, [r2, #16]
 80064c0:	f107 0108 	add.w	r1, r7, #8
 80064c4:	4610      	mov	r0, r2
 80064c6:	4798      	blx	r3
 80064c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ca:	e043      	b.n	8006554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa7d 	bl	80069ce <USBD_CtlError>
            err++;
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	3301      	adds	r3, #1
 80064d8:	72fb      	strb	r3, [r7, #11]
          break;
 80064da:	e03b      	b.n	8006554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	7c12      	ldrb	r2, [r2, #16]
 80064f4:	f107 0108 	add.w	r1, r7, #8
 80064f8:	4610      	mov	r0, r2
 80064fa:	4798      	blx	r3
 80064fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064fe:	e029      	b.n	8006554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fa63 	bl	80069ce <USBD_CtlError>
            err++;
 8006508:	7afb      	ldrb	r3, [r7, #11]
 800650a:	3301      	adds	r3, #1
 800650c:	72fb      	strb	r3, [r7, #11]
          break;
 800650e:	e021      	b.n	8006554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00b      	beq.n	8006534 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	7c12      	ldrb	r2, [r2, #16]
 8006528:	f107 0108 	add.w	r1, r7, #8
 800652c:	4610      	mov	r0, r2
 800652e:	4798      	blx	r3
 8006530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006532:	e00f      	b.n	8006554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fa49 	bl	80069ce <USBD_CtlError>
            err++;
 800653c:	7afb      	ldrb	r3, [r7, #11]
 800653e:	3301      	adds	r3, #1
 8006540:	72fb      	strb	r3, [r7, #11]
          break;
 8006542:	e007      	b.n	8006554 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa41 	bl	80069ce <USBD_CtlError>
          err++;
 800654c:	7afb      	ldrb	r3, [r7, #11]
 800654e:	3301      	adds	r3, #1
 8006550:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006552:	bf00      	nop
      }
      break;
 8006554:	e037      	b.n	80065c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	7c1b      	ldrb	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006566:	f107 0208 	add.w	r2, r7, #8
 800656a:	4610      	mov	r0, r2
 800656c:	4798      	blx	r3
 800656e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006570:	e029      	b.n	80065c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fa2a 	bl	80069ce <USBD_CtlError>
        err++;
 800657a:	7afb      	ldrb	r3, [r7, #11]
 800657c:	3301      	adds	r3, #1
 800657e:	72fb      	strb	r3, [r7, #11]
      break;
 8006580:	e021      	b.n	80065c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	7c1b      	ldrb	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10d      	bne.n	80065a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	f107 0208 	add.w	r2, r7, #8
 8006596:	4610      	mov	r0, r2
 8006598:	4798      	blx	r3
 800659a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3301      	adds	r3, #1
 80065a0:	2207      	movs	r2, #7
 80065a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065a4:	e00f      	b.n	80065c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa10 	bl	80069ce <USBD_CtlError>
        err++;
 80065ae:	7afb      	ldrb	r3, [r7, #11]
 80065b0:	3301      	adds	r3, #1
 80065b2:	72fb      	strb	r3, [r7, #11]
      break;
 80065b4:	e007      	b.n	80065c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fa08 	bl	80069ce <USBD_CtlError>
      err++;
 80065be:	7afb      	ldrb	r3, [r7, #11]
 80065c0:	3301      	adds	r3, #1
 80065c2:	72fb      	strb	r3, [r7, #11]
      break;
 80065c4:	bf00      	nop
  }

  if (err != 0U)
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d11e      	bne.n	800660a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	88db      	ldrh	r3, [r3, #6]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d016      	beq.n	8006602 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80065d4:	893b      	ldrh	r3, [r7, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00e      	beq.n	80065f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	88da      	ldrh	r2, [r3, #6]
 80065de:	893b      	ldrh	r3, [r7, #8]
 80065e0:	4293      	cmp	r3, r2
 80065e2:	bf28      	it	cs
 80065e4:	4613      	movcs	r3, r2
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80065ea:	893b      	ldrh	r3, [r7, #8]
 80065ec:	461a      	mov	r2, r3
 80065ee:	68f9      	ldr	r1, [r7, #12]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fa5d 	bl	8006ab0 <USBD_CtlSendData>
 80065f6:	e009      	b.n	800660c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f9e7 	bl	80069ce <USBD_CtlError>
 8006600:	e004      	b.n	800660c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 faae 	bl	8006b64 <USBD_CtlSendStatus>
 8006608:	e000      	b.n	800660c <USBD_GetDescriptor+0x2cc>
    return;
 800660a:	bf00      	nop
  }
}
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop

08006614 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	889b      	ldrh	r3, [r3, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d131      	bne.n	800668a <USBD_SetAddress+0x76>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	88db      	ldrh	r3, [r3, #6]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d12d      	bne.n	800668a <USBD_SetAddress+0x76>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	885b      	ldrh	r3, [r3, #2]
 8006632:	2b7f      	cmp	r3, #127	; 0x7f
 8006634:	d829      	bhi.n	800668a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	885b      	ldrh	r3, [r3, #2]
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006640:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b03      	cmp	r3, #3
 800664c:	d104      	bne.n	8006658 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f9bc 	bl	80069ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006656:	e01d      	b.n	8006694 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	7bfa      	ldrb	r2, [r7, #15]
 800665c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fed5 	bl	8007414 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fa7a 	bl	8006b64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667e:	e009      	b.n	8006694 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006688:	e004      	b.n	8006694 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f99e 	bl	80069ce <USBD_CtlError>
  }
}
 8006692:	bf00      	nop
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	885b      	ldrh	r3, [r3, #2]
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	4b4e      	ldr	r3, [pc, #312]	; (80067ec <USBD_SetConfig+0x150>)
 80066b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80066b4:	4b4d      	ldr	r3, [pc, #308]	; (80067ec <USBD_SetConfig+0x150>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d905      	bls.n	80066c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f985 	bl	80069ce <USBD_CtlError>
    return USBD_FAIL;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e08c      	b.n	80067e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d002      	beq.n	80066da <USBD_SetConfig+0x3e>
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d029      	beq.n	800672c <USBD_SetConfig+0x90>
 80066d8:	e075      	b.n	80067c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80066da:	4b44      	ldr	r3, [pc, #272]	; (80067ec <USBD_SetConfig+0x150>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d020      	beq.n	8006724 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80066e2:	4b42      	ldr	r3, [pc, #264]	; (80067ec <USBD_SetConfig+0x150>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066ec:	4b3f      	ldr	r3, [pc, #252]	; (80067ec <USBD_SetConfig+0x150>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fe ffe7 	bl	80056c6 <USBD_SetClassConfig>
 80066f8:	4603      	mov	r3, r0
 80066fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d008      	beq.n	8006714 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f962 	bl	80069ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006712:	e065      	b.n	80067e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fa25 	bl	8006b64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2203      	movs	r2, #3
 800671e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006722:	e05d      	b.n	80067e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fa1d 	bl	8006b64 <USBD_CtlSendStatus>
      break;
 800672a:	e059      	b.n	80067e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800672c:	4b2f      	ldr	r3, [pc, #188]	; (80067ec <USBD_SetConfig+0x150>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d112      	bne.n	800675a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800673c:	4b2b      	ldr	r3, [pc, #172]	; (80067ec <USBD_SetConfig+0x150>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006746:	4b29      	ldr	r3, [pc, #164]	; (80067ec <USBD_SetConfig+0x150>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7fe ffd6 	bl	80056fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fa06 	bl	8006b64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006758:	e042      	b.n	80067e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800675a:	4b24      	ldr	r3, [pc, #144]	; (80067ec <USBD_SetConfig+0x150>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	429a      	cmp	r2, r3
 8006766:	d02a      	beq.n	80067be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7fe ffc4 	bl	80056fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006776:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <USBD_SetConfig+0x150>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006780:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <USBD_SetConfig+0x150>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fe ff9d 	bl	80056c6 <USBD_SetClassConfig>
 800678c:	4603      	mov	r3, r0
 800678e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00f      	beq.n	80067b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f918 	bl	80069ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fe ffa9 	bl	80056fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80067b4:	e014      	b.n	80067e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f9d4 	bl	8006b64 <USBD_CtlSendStatus>
      break;
 80067bc:	e010      	b.n	80067e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f9d0 	bl	8006b64 <USBD_CtlSendStatus>
      break;
 80067c4:	e00c      	b.n	80067e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f900 	bl	80069ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067ce:	4b07      	ldr	r3, [pc, #28]	; (80067ec <USBD_SetConfig+0x150>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7fe ff92 	bl	80056fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80067da:	2303      	movs	r3, #3
 80067dc:	73fb      	strb	r3, [r7, #15]
      break;
 80067de:	bf00      	nop
  }

  return ret;
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000168 	.word	0x20000168

080067f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	88db      	ldrh	r3, [r3, #6]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d004      	beq.n	800680c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f8e2 	bl	80069ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800680a:	e023      	b.n	8006854 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	dc02      	bgt.n	800681e <USBD_GetConfig+0x2e>
 8006818:	2b00      	cmp	r3, #0
 800681a:	dc03      	bgt.n	8006824 <USBD_GetConfig+0x34>
 800681c:	e015      	b.n	800684a <USBD_GetConfig+0x5a>
 800681e:	2b03      	cmp	r3, #3
 8006820:	d00b      	beq.n	800683a <USBD_GetConfig+0x4a>
 8006822:	e012      	b.n	800684a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3308      	adds	r3, #8
 800682e:	2201      	movs	r2, #1
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f93c 	bl	8006ab0 <USBD_CtlSendData>
        break;
 8006838:	e00c      	b.n	8006854 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3304      	adds	r3, #4
 800683e:	2201      	movs	r2, #1
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f934 	bl	8006ab0 <USBD_CtlSendData>
        break;
 8006848:	e004      	b.n	8006854 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f8be 	bl	80069ce <USBD_CtlError>
        break;
 8006852:	bf00      	nop
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686c:	b2db      	uxtb	r3, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	2b02      	cmp	r3, #2
 8006872:	d81e      	bhi.n	80068b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	88db      	ldrh	r3, [r3, #6]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d004      	beq.n	8006886 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f8a5 	bl	80069ce <USBD_CtlError>
        break;
 8006884:	e01a      	b.n	80068bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f043 0202 	orr.w	r2, r3, #2
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	330c      	adds	r3, #12
 80068a6:	2202      	movs	r2, #2
 80068a8:	4619      	mov	r1, r3
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f900 	bl	8006ab0 <USBD_CtlSendData>
      break;
 80068b0:	e004      	b.n	80068bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f88a 	bl	80069ce <USBD_CtlError>
      break;
 80068ba:	bf00      	nop
  }
}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	885b      	ldrh	r3, [r3, #2]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d107      	bne.n	80068e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f940 	bl	8006b64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80068e4:	e013      	b.n	800690e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	885b      	ldrh	r3, [r3, #2]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d10b      	bne.n	8006906 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	889b      	ldrh	r3, [r3, #4]
 80068f2:	0a1b      	lsrs	r3, r3, #8
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f930 	bl	8006b64 <USBD_CtlSendStatus>
}
 8006904:	e003      	b.n	800690e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f860 	bl	80069ce <USBD_CtlError>
}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006926:	b2db      	uxtb	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	2b02      	cmp	r3, #2
 800692c:	d80b      	bhi.n	8006946 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	885b      	ldrh	r3, [r3, #2]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d10c      	bne.n	8006950 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f910 	bl	8006b64 <USBD_CtlSendStatus>
      }
      break;
 8006944:	e004      	b.n	8006950 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f840 	bl	80069ce <USBD_CtlError>
      break;
 800694e:	e000      	b.n	8006952 <USBD_ClrFeature+0x3c>
      break;
 8006950:	bf00      	nop
  }
}
 8006952:	bf00      	nop
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3301      	adds	r3, #1
 8006974:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	781a      	ldrb	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3301      	adds	r3, #1
 8006982:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff fa41 	bl	8005e0c <SWAPBYTE>
 800698a:	4603      	mov	r3, r0
 800698c:	461a      	mov	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3301      	adds	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3301      	adds	r3, #1
 800699c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff fa34 	bl	8005e0c <SWAPBYTE>
 80069a4:	4603      	mov	r3, r0
 80069a6:	461a      	mov	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3301      	adds	r3, #1
 80069b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f7ff fa27 	bl	8005e0c <SWAPBYTE>
 80069be:	4603      	mov	r3, r0
 80069c0:	461a      	mov	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	80da      	strh	r2, [r3, #6]
}
 80069c6:	bf00      	nop
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b082      	sub	sp, #8
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80069d8:	2180      	movs	r1, #128	; 0x80
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fcb0 	bl	8007340 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80069e0:	2100      	movs	r1, #0
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fcac 	bl	8007340 <USBD_LL_StallEP>
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d036      	beq.n	8006a74 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006a0a:	6938      	ldr	r0, [r7, #16]
 8006a0c:	f000 f836 	bl	8006a7c <USBD_GetLen>
 8006a10:	4603      	mov	r3, r0
 8006a12:	3301      	adds	r3, #1
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	4413      	add	r3, r2
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	7812      	ldrb	r2, [r2, #0]
 8006a28:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	4413      	add	r3, r2
 8006a36:	2203      	movs	r2, #3
 8006a38:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a40:	e013      	b.n	8006a6a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	4413      	add	r3, r2
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	7812      	ldrb	r2, [r2, #0]
 8006a4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	3301      	adds	r3, #1
 8006a52:	613b      	str	r3, [r7, #16]
    idx++;
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	3301      	adds	r3, #1
 8006a58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	4413      	add	r3, r2
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	3301      	adds	r3, #1
 8006a68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e7      	bne.n	8006a42 <USBD_GetString+0x52>
 8006a72:	e000      	b.n	8006a76 <USBD_GetString+0x86>
    return;
 8006a74:	bf00      	nop
  }
}
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a8c:	e005      	b.n	8006a9a <USBD_GetLen+0x1e>
  {
    len++;
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	3301      	adds	r3, #1
 8006a92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	3301      	adds	r3, #1
 8006a98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1f5      	bne.n	8006a8e <USBD_GetLen+0x12>
  }

  return len;
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 fcbb 	bl	8007452 <USBD_LL_Transmit>

  return USBD_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	2100      	movs	r1, #0
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fcaa 	bl	8007452 <USBD_LL_Transmit>

  return USBD_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2203      	movs	r2, #3
 8006b18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	2100      	movs	r1, #0
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 fcae 	bl	8007494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	2100      	movs	r1, #0
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fc9d 	bl	8007494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2204      	movs	r2, #4
 8006b70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b74:	2300      	movs	r3, #0
 8006b76:	2200      	movs	r2, #0
 8006b78:	2100      	movs	r1, #0
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fc69 	bl	8007452 <USBD_LL_Transmit>

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2205      	movs	r2, #5
 8006b96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fc77 	bl	8007494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4912      	ldr	r1, [pc, #72]	; (8006c00 <MX_USB_DEVICE_Init+0x50>)
 8006bb8:	4812      	ldr	r0, [pc, #72]	; (8006c04 <MX_USB_DEVICE_Init+0x54>)
 8006bba:	f7fe fd07 	bl	80055cc <USBD_Init>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006bc4:	f7f9 fd92 	bl	80006ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006bc8:	490f      	ldr	r1, [pc, #60]	; (8006c08 <MX_USB_DEVICE_Init+0x58>)
 8006bca:	480e      	ldr	r0, [pc, #56]	; (8006c04 <MX_USB_DEVICE_Init+0x54>)
 8006bcc:	f7fe fd2e 	bl	800562c <USBD_RegisterClass>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006bd6:	f7f9 fd89 	bl	80006ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006bda:	490c      	ldr	r1, [pc, #48]	; (8006c0c <MX_USB_DEVICE_Init+0x5c>)
 8006bdc:	4809      	ldr	r0, [pc, #36]	; (8006c04 <MX_USB_DEVICE_Init+0x54>)
 8006bde:	f7fe fc65 	bl	80054ac <USBD_CDC_RegisterInterface>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006be8:	f7f9 fd80 	bl	80006ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006bec:	4805      	ldr	r0, [pc, #20]	; (8006c04 <MX_USB_DEVICE_Init+0x54>)
 8006bee:	f7fe fd53 	bl	8005698 <USBD_Start>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006bf8:	f7f9 fd78 	bl	80006ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006bfc:	bf00      	nop
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	200000ac 	.word	0x200000ac
 8006c04:	2000016c 	.word	0x2000016c
 8006c08:	20000018 	.word	0x20000018
 8006c0c:	20000098 	.word	0x20000098

08006c10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006c14:	2200      	movs	r2, #0
 8006c16:	4905      	ldr	r1, [pc, #20]	; (8006c2c <CDC_Init_FS+0x1c>)
 8006c18:	4805      	ldr	r0, [pc, #20]	; (8006c30 <CDC_Init_FS+0x20>)
 8006c1a:	f7fe fc61 	bl	80054e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006c1e:	4905      	ldr	r1, [pc, #20]	; (8006c34 <CDC_Init_FS+0x24>)
 8006c20:	4803      	ldr	r0, [pc, #12]	; (8006c30 <CDC_Init_FS+0x20>)
 8006c22:	f7fe fc7f 	bl	8005524 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006c26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20000848 	.word	0x20000848
 8006c30:	2000016c 	.word	0x2000016c
 8006c34:	20000448 	.word	0x20000448

08006c38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	6039      	str	r1, [r7, #0]
 8006c52:	71fb      	strb	r3, [r7, #7]
 8006c54:	4613      	mov	r3, r2
 8006c56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	2b23      	cmp	r3, #35	; 0x23
 8006c5c:	d84a      	bhi.n	8006cf4 <CDC_Control_FS+0xac>
 8006c5e:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <CDC_Control_FS+0x1c>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006cf5 	.word	0x08006cf5
 8006c68:	08006cf5 	.word	0x08006cf5
 8006c6c:	08006cf5 	.word	0x08006cf5
 8006c70:	08006cf5 	.word	0x08006cf5
 8006c74:	08006cf5 	.word	0x08006cf5
 8006c78:	08006cf5 	.word	0x08006cf5
 8006c7c:	08006cf5 	.word	0x08006cf5
 8006c80:	08006cf5 	.word	0x08006cf5
 8006c84:	08006cf5 	.word	0x08006cf5
 8006c88:	08006cf5 	.word	0x08006cf5
 8006c8c:	08006cf5 	.word	0x08006cf5
 8006c90:	08006cf5 	.word	0x08006cf5
 8006c94:	08006cf5 	.word	0x08006cf5
 8006c98:	08006cf5 	.word	0x08006cf5
 8006c9c:	08006cf5 	.word	0x08006cf5
 8006ca0:	08006cf5 	.word	0x08006cf5
 8006ca4:	08006cf5 	.word	0x08006cf5
 8006ca8:	08006cf5 	.word	0x08006cf5
 8006cac:	08006cf5 	.word	0x08006cf5
 8006cb0:	08006cf5 	.word	0x08006cf5
 8006cb4:	08006cf5 	.word	0x08006cf5
 8006cb8:	08006cf5 	.word	0x08006cf5
 8006cbc:	08006cf5 	.word	0x08006cf5
 8006cc0:	08006cf5 	.word	0x08006cf5
 8006cc4:	08006cf5 	.word	0x08006cf5
 8006cc8:	08006cf5 	.word	0x08006cf5
 8006ccc:	08006cf5 	.word	0x08006cf5
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006cf5 	.word	0x08006cf5
 8006cd8:	08006cf5 	.word	0x08006cf5
 8006cdc:	08006cf5 	.word	0x08006cf5
 8006ce0:	08006cf5 	.word	0x08006cf5
 8006ce4:	08006cf5 	.word	0x08006cf5
 8006ce8:	08006cf5 	.word	0x08006cf5
 8006cec:	08006cf5 	.word	0x08006cf5
 8006cf0:	08006cf5 	.word	0x08006cf5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006cf4:	bf00      	nop
  }

  return (USBD_OK);
 8006cf6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4805      	ldr	r0, [pc, #20]	; (8006d28 <CDC_Receive_FS+0x24>)
 8006d12:	f7fe fc07 	bl	8005524 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006d16:	4804      	ldr	r0, [pc, #16]	; (8006d28 <CDC_Receive_FS+0x24>)
 8006d18:	f7fe fc22 	bl	8005560 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006d1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	2000016c 	.word	0x2000016c

08006d2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
	...

08006d50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	4603      	mov	r3, r0
 8006d58:	6039      	str	r1, [r7, #0]
 8006d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2212      	movs	r2, #18
 8006d60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d62:	4b03      	ldr	r3, [pc, #12]	; (8006d70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	200000c8 	.word	0x200000c8

08006d74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	6039      	str	r1, [r7, #0]
 8006d7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2204      	movs	r2, #4
 8006d84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d86:	4b03      	ldr	r3, [pc, #12]	; (8006d94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	200000dc 	.word	0x200000dc

08006d98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	6039      	str	r1, [r7, #0]
 8006da2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d105      	bne.n	8006db6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	4907      	ldr	r1, [pc, #28]	; (8006dcc <USBD_FS_ProductStrDescriptor+0x34>)
 8006dae:	4808      	ldr	r0, [pc, #32]	; (8006dd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006db0:	f7ff fe1e 	bl	80069f0 <USBD_GetString>
 8006db4:	e004      	b.n	8006dc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	4904      	ldr	r1, [pc, #16]	; (8006dcc <USBD_FS_ProductStrDescriptor+0x34>)
 8006dba:	4805      	ldr	r0, [pc, #20]	; (8006dd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006dbc:	f7ff fe18 	bl	80069f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dc0:	4b02      	ldr	r3, [pc, #8]	; (8006dcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000c48 	.word	0x20000c48
 8006dd0:	080075f4 	.word	0x080075f4

08006dd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	6039      	str	r1, [r7, #0]
 8006dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	4904      	ldr	r1, [pc, #16]	; (8006df4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006de4:	4804      	ldr	r0, [pc, #16]	; (8006df8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006de6:	f7ff fe03 	bl	80069f0 <USBD_GetString>
  return USBD_StrDesc;
 8006dea:	4b02      	ldr	r3, [pc, #8]	; (8006df4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	20000c48 	.word	0x20000c48
 8006df8:	0800760c 	.word	0x0800760c

08006dfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	4603      	mov	r3, r0
 8006e04:	6039      	str	r1, [r7, #0]
 8006e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	221a      	movs	r2, #26
 8006e0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e0e:	f000 f843 	bl	8006e98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e12:	4b02      	ldr	r3, [pc, #8]	; (8006e1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	200000e0 	.word	0x200000e0

08006e20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	6039      	str	r1, [r7, #0]
 8006e2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d105      	bne.n	8006e3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	4907      	ldr	r1, [pc, #28]	; (8006e54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e36:	4808      	ldr	r0, [pc, #32]	; (8006e58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e38:	f7ff fdda 	bl	80069f0 <USBD_GetString>
 8006e3c:	e004      	b.n	8006e48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	4904      	ldr	r1, [pc, #16]	; (8006e54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e42:	4805      	ldr	r0, [pc, #20]	; (8006e58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e44:	f7ff fdd4 	bl	80069f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e48:	4b02      	ldr	r3, [pc, #8]	; (8006e54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000c48 	.word	0x20000c48
 8006e58:	08007620 	.word	0x08007620

08006e5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	6039      	str	r1, [r7, #0]
 8006e66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d105      	bne.n	8006e7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	4907      	ldr	r1, [pc, #28]	; (8006e90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e72:	4808      	ldr	r0, [pc, #32]	; (8006e94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e74:	f7ff fdbc 	bl	80069f0 <USBD_GetString>
 8006e78:	e004      	b.n	8006e84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	4904      	ldr	r1, [pc, #16]	; (8006e90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e7e:	4805      	ldr	r0, [pc, #20]	; (8006e94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e80:	f7ff fdb6 	bl	80069f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e84:	4b02      	ldr	r3, [pc, #8]	; (8006e90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000c48 	.word	0x20000c48
 8006e94:	0800762c 	.word	0x0800762c

08006e98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e9e:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <Get_SerialNum+0x44>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <Get_SerialNum+0x48>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006eaa:	4b0e      	ldr	r3, [pc, #56]	; (8006ee4 <Get_SerialNum+0x4c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ebe:	2208      	movs	r2, #8
 8006ec0:	4909      	ldr	r1, [pc, #36]	; (8006ee8 <Get_SerialNum+0x50>)
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 f814 	bl	8006ef0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006ec8:	2204      	movs	r2, #4
 8006eca:	4908      	ldr	r1, [pc, #32]	; (8006eec <Get_SerialNum+0x54>)
 8006ecc:	68b8      	ldr	r0, [r7, #8]
 8006ece:	f000 f80f 	bl	8006ef0 <IntToUnicode>
  }
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	1fff7a10 	.word	0x1fff7a10
 8006ee0:	1fff7a14 	.word	0x1fff7a14
 8006ee4:	1fff7a18 	.word	0x1fff7a18
 8006ee8:	200000e2 	.word	0x200000e2
 8006eec:	200000f2 	.word	0x200000f2

08006ef0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f02:	2300      	movs	r3, #0
 8006f04:	75fb      	strb	r3, [r7, #23]
 8006f06:	e027      	b.n	8006f58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	0f1b      	lsrs	r3, r3, #28
 8006f0c:	2b09      	cmp	r3, #9
 8006f0e:	d80b      	bhi.n	8006f28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	0f1b      	lsrs	r3, r3, #28
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	440b      	add	r3, r1
 8006f20:	3230      	adds	r2, #48	; 0x30
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	e00a      	b.n	8006f3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	0f1b      	lsrs	r3, r3, #28
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	4619      	mov	r1, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	440b      	add	r3, r1
 8006f38:	3237      	adds	r2, #55	; 0x37
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	3301      	adds	r3, #1
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	3301      	adds	r3, #1
 8006f56:	75fb      	strb	r3, [r7, #23]
 8006f58:	7dfa      	ldrb	r2, [r7, #23]
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d3d3      	bcc.n	8006f08 <IntToUnicode+0x18>
  }
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
	...

08006f70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08a      	sub	sp, #40	; 0x28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f78:	f107 0314 	add.w	r3, r7, #20
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	605a      	str	r2, [r3, #4]
 8006f82:	609a      	str	r2, [r3, #8]
 8006f84:	60da      	str	r2, [r3, #12]
 8006f86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f90:	d13a      	bne.n	8007008 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f92:	2300      	movs	r3, #0
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	4b1e      	ldr	r3, [pc, #120]	; (8007010 <HAL_PCD_MspInit+0xa0>)
 8006f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9a:	4a1d      	ldr	r2, [pc, #116]	; (8007010 <HAL_PCD_MspInit+0xa0>)
 8006f9c:	f043 0301 	orr.w	r3, r3, #1
 8006fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8006fa2:	4b1b      	ldr	r3, [pc, #108]	; (8007010 <HAL_PCD_MspInit+0xa0>)
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006fae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006fc0:	230a      	movs	r3, #10
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fc4:	f107 0314 	add.w	r3, r7, #20
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4812      	ldr	r0, [pc, #72]	; (8007014 <HAL_PCD_MspInit+0xa4>)
 8006fcc:	f7fa f9c8 	bl	8001360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <HAL_PCD_MspInit+0xa0>)
 8006fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd4:	4a0e      	ldr	r2, [pc, #56]	; (8007010 <HAL_PCD_MspInit+0xa0>)
 8006fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fda:	6353      	str	r3, [r2, #52]	; 0x34
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <HAL_PCD_MspInit+0xa0>)
 8006fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe4:	4a0a      	ldr	r2, [pc, #40]	; (8007010 <HAL_PCD_MspInit+0xa0>)
 8006fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fea:	6453      	str	r3, [r2, #68]	; 0x44
 8006fec:	4b08      	ldr	r3, [pc, #32]	; (8007010 <HAL_PCD_MspInit+0xa0>)
 8006fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	2043      	movs	r0, #67	; 0x43
 8006ffe:	f7fa f978 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007002:	2043      	movs	r0, #67	; 0x43
 8007004:	f7fa f991 	bl	800132a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007008:	bf00      	nop
 800700a:	3728      	adds	r7, #40	; 0x28
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	40023800 	.word	0x40023800
 8007014:	40020000 	.word	0x40020000

08007018 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800702c:	4619      	mov	r1, r3
 800702e:	4610      	mov	r0, r2
 8007030:	f7fe fb7f 	bl	8005732 <USBD_LL_SetupStage>
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800704e:	78fa      	ldrb	r2, [r7, #3]
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	4613      	mov	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	78fb      	ldrb	r3, [r7, #3]
 8007064:	4619      	mov	r1, r3
 8007066:	f7fe fbb9 	bl	80057dc <USBD_LL_DataOutStage>
}
 800706a:	bf00      	nop
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007084:	78fa      	ldrb	r2, [r7, #3]
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	4613      	mov	r3, r2
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	440b      	add	r3, r1
 8007092:	334c      	adds	r3, #76	; 0x4c
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	4619      	mov	r1, r3
 800709a:	f7fe fc52 	bl	8005942 <USBD_LL_DataInStage>
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fd86 	bl	8005bc6 <USBD_LL_SOF>
}
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80070ca:	2301      	movs	r3, #1
 80070cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d001      	beq.n	80070da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80070d6:	f7f9 fb09 	bl	80006ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070e0:	7bfa      	ldrb	r2, [r7, #15]
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe fd30 	bl	8005b4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fe fcd8 	bl	8005aa6 <USBD_LL_Reset>
}
 80070f6:	bf00      	nop
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe fd2b 	bl	8005b6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6812      	ldr	r2, [r2, #0]
 8007122:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007126:	f043 0301 	orr.w	r3, r3, #1
 800712a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007134:	4b04      	ldr	r3, [pc, #16]	; (8007148 <HAL_PCD_SuspendCallback+0x48>)
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	4a03      	ldr	r2, [pc, #12]	; (8007148 <HAL_PCD_SuspendCallback+0x48>)
 800713a:	f043 0306 	orr.w	r3, r3, #6
 800713e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	e000ed00 	.word	0xe000ed00

0800714c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fd1b 	bl	8005b96 <USBD_LL_Resume>
}
 8007160:	bf00      	nop
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800717a:	78fa      	ldrb	r2, [r7, #3]
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fd73 	bl	8005c6a <USBD_LL_IsoOUTIncomplete>
}
 8007184:	bf00      	nop
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800719e:	78fa      	ldrb	r2, [r7, #3]
 80071a0:	4611      	mov	r1, r2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe fd2f 	bl	8005c06 <USBD_LL_IsoINIncomplete>
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe fd85 	bl	8005cce <USBD_LL_DevConnected>
}
 80071c4:	bf00      	nop
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe fd82 	bl	8005ce4 <USBD_LL_DevDisconnected>
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d13c      	bne.n	8007272 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071f8:	4a20      	ldr	r2, [pc, #128]	; (800727c <USBD_LL_Init+0x94>)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a1e      	ldr	r2, [pc, #120]	; (800727c <USBD_LL_Init+0x94>)
 8007204:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007208:	4b1c      	ldr	r3, [pc, #112]	; (800727c <USBD_LL_Init+0x94>)
 800720a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800720e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007210:	4b1a      	ldr	r3, [pc, #104]	; (800727c <USBD_LL_Init+0x94>)
 8007212:	2204      	movs	r2, #4
 8007214:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007216:	4b19      	ldr	r3, [pc, #100]	; (800727c <USBD_LL_Init+0x94>)
 8007218:	2202      	movs	r2, #2
 800721a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800721c:	4b17      	ldr	r3, [pc, #92]	; (800727c <USBD_LL_Init+0x94>)
 800721e:	2200      	movs	r2, #0
 8007220:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007222:	4b16      	ldr	r3, [pc, #88]	; (800727c <USBD_LL_Init+0x94>)
 8007224:	2202      	movs	r2, #2
 8007226:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007228:	4b14      	ldr	r3, [pc, #80]	; (800727c <USBD_LL_Init+0x94>)
 800722a:	2200      	movs	r2, #0
 800722c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <USBD_LL_Init+0x94>)
 8007230:	2200      	movs	r2, #0
 8007232:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007234:	4b11      	ldr	r3, [pc, #68]	; (800727c <USBD_LL_Init+0x94>)
 8007236:	2200      	movs	r2, #0
 8007238:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800723a:	4b10      	ldr	r3, [pc, #64]	; (800727c <USBD_LL_Init+0x94>)
 800723c:	2200      	movs	r2, #0
 800723e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007240:	4b0e      	ldr	r3, [pc, #56]	; (800727c <USBD_LL_Init+0x94>)
 8007242:	2200      	movs	r2, #0
 8007244:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007246:	480d      	ldr	r0, [pc, #52]	; (800727c <USBD_LL_Init+0x94>)
 8007248:	f7fa fa0e 	bl	8001668 <HAL_PCD_Init>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007252:	f7f9 fa4b 	bl	80006ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	4808      	ldr	r0, [pc, #32]	; (800727c <USBD_LL_Init+0x94>)
 800725a:	f7fb fc66 	bl	8002b2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800725e:	2240      	movs	r2, #64	; 0x40
 8007260:	2100      	movs	r1, #0
 8007262:	4806      	ldr	r0, [pc, #24]	; (800727c <USBD_LL_Init+0x94>)
 8007264:	f7fb fc1a 	bl	8002a9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007268:	2280      	movs	r2, #128	; 0x80
 800726a:	2101      	movs	r1, #1
 800726c:	4803      	ldr	r0, [pc, #12]	; (800727c <USBD_LL_Init+0x94>)
 800726e:	f7fb fc15 	bl	8002a9c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20000e48 	.word	0x20000e48

08007280 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007296:	4618      	mov	r0, r3
 8007298:	f7fa fb03 	bl	80018a2 <HAL_PCD_Start>
 800729c:	4603      	mov	r3, r0
 800729e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 f942 	bl	800752c <USBD_Get_USB_Status>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	4608      	mov	r0, r1
 80072c0:	4611      	mov	r1, r2
 80072c2:	461a      	mov	r2, r3
 80072c4:	4603      	mov	r3, r0
 80072c6:	70fb      	strb	r3, [r7, #3]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70bb      	strb	r3, [r7, #2]
 80072cc:	4613      	mov	r3, r2
 80072ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80072de:	78bb      	ldrb	r3, [r7, #2]
 80072e0:	883a      	ldrh	r2, [r7, #0]
 80072e2:	78f9      	ldrb	r1, [r7, #3]
 80072e4:	f7fa ffd4 	bl	8002290 <HAL_PCD_EP_Open>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 f91c 	bl	800752c <USBD_Get_USB_Status>
 80072f4:	4603      	mov	r3, r0
 80072f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	460b      	mov	r3, r1
 800730c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800731c:	78fa      	ldrb	r2, [r7, #3]
 800731e:	4611      	mov	r1, r2
 8007320:	4618      	mov	r0, r3
 8007322:	f7fb f81d 	bl	8002360 <HAL_PCD_EP_Close>
 8007326:	4603      	mov	r3, r0
 8007328:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	4618      	mov	r0, r3
 800732e:	f000 f8fd 	bl	800752c <USBD_Get_USB_Status>
 8007332:	4603      	mov	r3, r0
 8007334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007336:	7bbb      	ldrb	r3, [r7, #14]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800735a:	78fa      	ldrb	r2, [r7, #3]
 800735c:	4611      	mov	r1, r2
 800735e:	4618      	mov	r0, r3
 8007360:	f7fb f8f5 	bl	800254e <HAL_PCD_EP_SetStall>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	4618      	mov	r0, r3
 800736c:	f000 f8de 	bl	800752c <USBD_Get_USB_Status>
 8007370:	4603      	mov	r3, r0
 8007372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007374:	7bbb      	ldrb	r3, [r7, #14]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007398:	78fa      	ldrb	r2, [r7, #3]
 800739a:	4611      	mov	r1, r2
 800739c:	4618      	mov	r0, r3
 800739e:	f7fb f93a 	bl	8002616 <HAL_PCD_EP_ClrStall>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 f8bf 	bl	800752c <USBD_Get_USB_Status>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80073d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	da0b      	bge.n	80073f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073de:	68f9      	ldr	r1, [r7, #12]
 80073e0:	4613      	mov	r3, r2
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	333e      	adds	r3, #62	; 0x3e
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	e00b      	b.n	8007408 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073f6:	68f9      	ldr	r1, [r7, #12]
 80073f8:	4613      	mov	r3, r2
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	440b      	add	r3, r1
 8007402:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007406:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800742e:	78fa      	ldrb	r2, [r7, #3]
 8007430:	4611      	mov	r1, r2
 8007432:	4618      	mov	r0, r3
 8007434:	f7fa ff07 	bl	8002246 <HAL_PCD_SetAddress>
 8007438:	4603      	mov	r3, r0
 800743a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 f874 	bl	800752c <USBD_Get_USB_Status>
 8007444:	4603      	mov	r3, r0
 8007446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007448:	7bbb      	ldrb	r3, [r7, #14]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b086      	sub	sp, #24
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	460b      	mov	r3, r1
 8007460:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007470:	7af9      	ldrb	r1, [r7, #11]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	f7fb f820 	bl	80024ba <HAL_PCD_EP_Transmit>
 800747a:	4603      	mov	r3, r0
 800747c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 f853 	bl	800752c <USBD_Get_USB_Status>
 8007486:	4603      	mov	r3, r0
 8007488:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800748a:	7dbb      	ldrb	r3, [r7, #22]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	460b      	mov	r3, r1
 80074a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80074b2:	7af9      	ldrb	r1, [r7, #11]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	f7fa ff9c 	bl	80023f4 <HAL_PCD_EP_Receive>
 80074bc:	4603      	mov	r3, r0
 80074be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 f832 	bl	800752c <USBD_Get_USB_Status>
 80074c8:	4603      	mov	r3, r0
 80074ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074e8:	78fa      	ldrb	r2, [r7, #3]
 80074ea:	4611      	mov	r1, r2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fa ffcc 	bl	800248a <HAL_PCD_EP_GetRxCount>
 80074f2:	4603      	mov	r3, r0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007504:	4b03      	ldr	r3, [pc, #12]	; (8007514 <USBD_static_malloc+0x18>)
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	20001354 	.word	0x20001354

08007518 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]

}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	2b03      	cmp	r3, #3
 800753e:	d817      	bhi.n	8007570 <USBD_Get_USB_Status+0x44>
 8007540:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <USBD_Get_USB_Status+0x1c>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	08007559 	.word	0x08007559
 800754c:	0800755f 	.word	0x0800755f
 8007550:	08007565 	.word	0x08007565
 8007554:	0800756b 	.word	0x0800756b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
    break;
 800755c:	e00b      	b.n	8007576 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800755e:	2303      	movs	r3, #3
 8007560:	73fb      	strb	r3, [r7, #15]
    break;
 8007562:	e008      	b.n	8007576 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007564:	2301      	movs	r3, #1
 8007566:	73fb      	strb	r3, [r7, #15]
    break;
 8007568:	e005      	b.n	8007576 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800756a:	2303      	movs	r3, #3
 800756c:	73fb      	strb	r3, [r7, #15]
    break;
 800756e:	e002      	b.n	8007576 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007570:	2303      	movs	r3, #3
 8007572:	73fb      	strb	r3, [r7, #15]
    break;
 8007574:	bf00      	nop
  }
  return usb_status;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <memset>:
 8007584:	4402      	add	r2, r0
 8007586:	4603      	mov	r3, r0
 8007588:	4293      	cmp	r3, r2
 800758a:	d100      	bne.n	800758e <memset+0xa>
 800758c:	4770      	bx	lr
 800758e:	f803 1b01 	strb.w	r1, [r3], #1
 8007592:	e7f9      	b.n	8007588 <memset+0x4>

08007594 <__libc_init_array>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	4d0d      	ldr	r5, [pc, #52]	; (80075cc <__libc_init_array+0x38>)
 8007598:	4c0d      	ldr	r4, [pc, #52]	; (80075d0 <__libc_init_array+0x3c>)
 800759a:	1b64      	subs	r4, r4, r5
 800759c:	10a4      	asrs	r4, r4, #2
 800759e:	2600      	movs	r6, #0
 80075a0:	42a6      	cmp	r6, r4
 80075a2:	d109      	bne.n	80075b8 <__libc_init_array+0x24>
 80075a4:	4d0b      	ldr	r5, [pc, #44]	; (80075d4 <__libc_init_array+0x40>)
 80075a6:	4c0c      	ldr	r4, [pc, #48]	; (80075d8 <__libc_init_array+0x44>)
 80075a8:	f000 f818 	bl	80075dc <_init>
 80075ac:	1b64      	subs	r4, r4, r5
 80075ae:	10a4      	asrs	r4, r4, #2
 80075b0:	2600      	movs	r6, #0
 80075b2:	42a6      	cmp	r6, r4
 80075b4:	d105      	bne.n	80075c2 <__libc_init_array+0x2e>
 80075b6:	bd70      	pop	{r4, r5, r6, pc}
 80075b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075bc:	4798      	blx	r3
 80075be:	3601      	adds	r6, #1
 80075c0:	e7ee      	b.n	80075a0 <__libc_init_array+0xc>
 80075c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075c6:	4798      	blx	r3
 80075c8:	3601      	adds	r6, #1
 80075ca:	e7f2      	b.n	80075b2 <__libc_init_array+0x1e>
 80075cc:	08007654 	.word	0x08007654
 80075d0:	08007654 	.word	0x08007654
 80075d4:	08007654 	.word	0x08007654
 80075d8:	08007658 	.word	0x08007658

080075dc <_init>:
 80075dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075de:	bf00      	nop
 80075e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e2:	bc08      	pop	{r3}
 80075e4:	469e      	mov	lr, r3
 80075e6:	4770      	bx	lr

080075e8 <_fini>:
 80075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ea:	bf00      	nop
 80075ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ee:	bc08      	pop	{r3}
 80075f0:	469e      	mov	lr, r3
 80075f2:	4770      	bx	lr
